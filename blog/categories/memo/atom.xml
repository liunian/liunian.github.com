<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memo | memos]]></title>
  <link href="http://liunian.github.io/blog/categories/memo/atom.xml" rel="self"/>
  <link href="http://liunian.github.io/"/>
  <updated>2015-12-25T14:57:41+08:00</updated>
  <id>http://liunian.github.io/</id>
  <author>
    <name><![CDATA[流年]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Io Language]]></title>
    <link href="http://liunian.github.io/blog/io-language/"/>
    <updated>2013-01-01T03:13:05+08:00</updated>
    <id>http://liunian.github.io/blog/io-language</id>
    <content type="html"><![CDATA[<p>这是 <a href="http://iolanguage.org/">Io</a> 的简单笔记。</p>

<p>相关资源</p>

<ul>
<li><a href="http://iolanguage.org/">官网</a></li>
<li><a href="http://en.wikibooks.org/wiki/Io_Programming">wiki</a></li>
<li><a href="http://www.iolanguage.net/">一个中文博客</a></li>
<li><a href="http://iolanguage.org/scm/io/docs/IoTutorial.html">Tutorial</a></li>
</ul>


<h2>Basic</h2>

<ol>
<li>字符串只能用双引号，不能用单引号</li>
<li>没有类，只有类型和对象。两者的区别是前者有type标识(slot)，并且该标识是在创建时因为其为大写字母开头而确定为类型来添加的。</li>
<li>不是对象式的方法调用，而是向对象发送信息，比如 &ldquo;abc&rdquo; print。</li>
<li>一般地，赋值使用 := 而不是 =，如 obj := Object clone。在对象或对象 slot 还没存在的情况下，使用 = 会出错，但使用 := 则会先创建然后赋值。</li>
<li>从上可以看到，从某种类型创建一个对象使用 clone 消息。</li>
<li>查看一个对象可用 obj slotNames。</li>
<li>继承机制使用原型（proto）而不是父子类，如：
<figure class='code'><figcaption><span> (1.io)</span> <a href='/downloads/code/1.io'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='io'><span class='line'><span class="c1">#!/usr/bin/env io</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vehicle</span> <span class="o">:=</span> <span class="nb">Object</span> <span class="k">clone</span>
</span><span class='line'><span class="n">Vehicle</span> <span class="n">description</span> <span class="o">:=</span> <span class="s">&quot;Something to take you far away&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Car</span> <span class="o">:=</span> <span class="n">Vehicle</span> <span class="k">clone</span>
</span><span class='line'><span class="n">ferrari</span> <span class="o">:=</span> <span class="n">Car</span> <span class="k">clone</span>
</span><span class='line'>
</span><span class='line'><span class="n">Car</span> <span class="n">slotNames</span> <span class="n">println</span>           <span class="c1"># list(type)</span>
</span><span class='line'><span class="n">ferrari</span> <span class="n">slotNames</span> <span class="n">println</span>       <span class="c1"># list()</span>
</span><span class='line'>
</span><span class='line'><span class="n">Car</span> <span class="n">description</span> <span class="n">println</span>         <span class="c1"># Something to take you far away</span>
</span><span class='line'><span class="n">ferrari</span> <span class="n">description</span> <span class="n">println</span>     <span class="c1"># Something to take you far away</span>
</span><span class='line'>
</span><span class='line'><span class="n">ferrari</span> <span class="n">proto</span> <span class="n">println</span>           <span class="c1"># Car_0x19bcb80: type = &quot;Car&quot;</span>
</span><span class='line'><span class="n">Car</span>     <span class="n">proto</span> <span class="n">println</span>           <span class="c1"># Vehicle_0x19c9f10: description = &quot;Something...&quot; type = &quot;Vehicle&quot;</span>
</span><span class='line'><span class="n">Vehicle</span> <span class="n">proto</span> <span class="n">println</span>           <span class="c1"># Object_0x17c1a10: type = Object_type() .....</span>
</span><span class='line'><span class="nb">Object</span>  <span class="n">proto</span> <span class="n">println</span>           <span class="c1"># Object_17e5720: Car = Car_0x19bcb80 Vehicle = Vehicle_0x19c9f10 Protos = xxx Lobby = xxxx ....</span>
</span></code></pre></td></tr></table></div></figure></li>
<li>方法使用 method() 创建，如：Car dirve := method(&ldquo;Vroom&rdquo; print)，给 ferrari 发送 drive 消息将有 ferrari drive => &ldquo;Vroom&#8221;。</li>
<li>和 Ruby 一样，0 是 true 而不是 false。nil 是 false。</li>
</ol>


<!-- more -->


<h2>List &amp; Map</h2>

<p><figure class='code'><figcaption><span> (2.io)</span> <a href='/downloads/code/2.io'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='io'><span class='line'><span class="c1">#!/usr/bin/env io</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">:=</span> <span class="nb">List</span> <span class="k">clone</span>             <span class="c1"># list(), create by using clone</span>
</span><span class='line'><span class="n">a</span> <span class="o">:=</span> <span class="nb">list</span><span class="o">(</span><span class="mf">1</span><span class="o">,</span> <span class="mf">2</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">)</span>   <span class="c1"># list(1, 2, a, b), create by using method</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="n">at</span><span class="o">(</span><span class="mf">1</span><span class="o">)</span>                     <span class="c1"># 2</span>
</span><span class='line'><span class="n">a</span> <span class="n">append</span><span class="o">(</span><span class="mf">3</span><span class="o">)</span>                 <span class="c1"># list(1, 2, a, b, 3)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># more examples: http://iolanguage.org/scm/io/docs/IoGuide.html#Primitives-List</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Control Flow</h2>

<pre><code class="io">loop("getting dizzy..." println)

# while(condiction, other_codes)
i := 0
while(i &lt;= 11, i println; i = i + 1);   "This one goes up to 11" println

# for(counter, init, end, step, msg_slot)
for(i, 1, 11, 2, i println)

# if(condition, true_code, false_code)
if(true, "It is true.", "It is false.")
if(false) then("It is true.") else("It is false")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Library]]></title>
    <link href="http://liunian.github.io/blog/python-library/"/>
    <updated>2012-12-19T03:10:13+08:00</updated>
    <id>http://liunian.github.io/blog/python-library</id>
    <content type="html"><![CDATA[<h2>Built-in Functions</h2>

<p><em>callable(object)</em></p>

<p>Note that classed are callable(calling a class returns a new instance); class instances are callable if they have a <code>__call__()</code> method.
classmethod VS staticmethod</p>

<p><em>cmp(x, y)</em></p>

<p>return negative if x &lt; y, 0 if x = y, positive if x > y</p>

<p><em>To be continued…</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress memo]]></title>
    <link href="http://liunian.github.io/blog/octopress/"/>
    <updated>2012-08-03T02:51:34+08:00</updated>
    <id>http://liunian.github.io/blog/octopress</id>
    <content type="html"><![CDATA[<h2>Install</h2>

<pre><code class="bash">bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></pre>

<p>Add to bash command</p>

<pre><code class="bash">echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile

# If using Zsh do this instead
echo '[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm' &gt;&gt; ~/.zshrc
source ~/.zshrc
</code></pre>

<p>Install Ruby</p>

<pre><code class="bash">rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
# 1.9.3 will not fit here for now
</code></pre>

<p>Switch back to system</p>

<pre><code class="bash">rvm use system
</code></pre>

<p>when using zsh, should add something in .zshrc to make it work right.</p>

<pre><code class="bash">alias rake="noglob rake"
</code></pre>

<p>After adding it, restart the terminal or source the .zshrc file.</p>

<!-- more -->


<h2>code snippets</h2>

<h3><a href="http://octopress.org/docs/blogging/code/">Basic</a></h3>

<p><code>
</code> [language] [title] [url] [link text]
code snippet
&#8220;`
&#8220;`</p>

<h3>Gists</h3>

<pre><code>{\% gist gist_id [filename] %}
</code></pre>

<h3>Include Code Snippets</h3>

<p>Import files on your filesystem into any blog post as embedded code snippets with syntax highlighting and a download link. In the _config.yml you can set your code_dir but the default is <code>source/downloads/code</code>. Simply put a file anywhere under that directory and use the following tag to embed it in a post.</p>

<pre><code>File /Users/bd/www/blog/source/downloads/code/path/to/file could not be found
</code></pre>

<p>Following example will include the code file: <code>source/downloads/code/test.js</code></p>

<pre><code>File /Users/bd/www/blog/source/downloads/code/test.js could not be found
</code></pre>

<h2>image</h2>

<pre><code><img class="[class names]" src="/path/to/image" title="[width] [height] [title text [alt text]]" >
</code></pre>

<h2>extended blockquote</h2>

<pre><code><blockquote><p>Quote string</p><footer><strong>[author[</strong> <cite>Source]] [Link] [Source_link_title]</cite></footer></blockquote>
</code></pre>

<h2>Render Partial</h2>

<pre><code>File /Users/bd/www/blog/source/path/to/file could not be found
</code></pre>

<h2>add about page</h2>

<pre><code>http://gangmax.github.com/blog/2012/05/04/add-about-page-in-octopress/
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Tutorial]]></title>
    <link href="http://liunian.github.io/blog/python-tutorial/"/>
    <updated>2012-07-14T02:21:51+08:00</updated>
    <id>http://liunian.github.io/blog/python-tutorial</id>
    <content type="html"><![CDATA[<h2>Python Interactive Shell</h2>

<p><code>_</code> 变量代表最后一次 return 的值。</p>

<h2>Source Code Encoding</h2>

<p>Python 2.x 默认识别源码为 ASCII，对于需要使用如中文等，可以在源码中指定编码类型，如：</p>

<pre><code># -*- coding: utf-8 -*-
</code></pre>

<p>此方法不使用与 2.2 及更旧版本，3.x 后默认为 utf-8 编码，无需如此。</p>

<p>注意：</p>

<ul>
<li>如果第一行是如 <code>/usr/bin/env python</code> 这样的指定，那么指定的编码类型必须位于第二行，中间不能有空行。</li>
<li>如果第一行不是程序指定，那么编码类型注释前面可以有空行。</li>
<li>加了编码类型注释后，注释中可以直接使用中文了，但在代码中，需要用 u<code>'中文'</code>，而不能直接想 JS 中那样使用字符串。</li>
</ul>


<h2>Number</h2>

<p>0 == 0.0</p>

<p>/ （除法）</p>

<p>2.x 中对两个整数应用 / ，得到的是 math.floor，但其中一个 float，则得到 float。如：5 / 2 = 2； 5 / 2.0 = 2.5；</p>

<p>3.x 中默认是普通的除法，不取 floor。</p>

<h2>复数（complex）</h2>

<p>用 1j 或 2J 等形式来表示虚数，也可以用 complex 类来构建复数。如：<code>(1+2j) + complex(2, 1)</code>。得到的复数 i，可以用 <code>i.real</code> 和 <code>i.imag</code> 来分别获取实数部分和虚数部分。</p>

<!-- more -->


<h2>unicode</h2>

<h3>unicode to str</h3>

<p>对于用 <code>u’string’</code> 声明的 unicode 变量，如果都是 ASCII 码，那么可以用 <code>str</code> 来转换为普通的字符串，但如果有非 ASCII 的，那么则无法。</p>

<p>这使用需要使用 <code>aunicodeObj.encode('utf-8')</code> 等形式来转换为对应编码的字符串。</p>

<h2>multiple assignment</h2>

<p>可以用 <code>a, b = 0, 1</code> 这种形式来同时多个赋值，利用这个特性，可以做到交换值的功能：<code>a, b = b, a</code>。</p>

<h2>Control Flow</h2>

<h3>if else</h3>

<pre><code class="Python">if condition:
    doSomething
elif otherCondition:
    doSomething Else
else:
    others
</code></pre>

<h3>for</h3>

<pre><code class="Python">for i in iterable:
    print i
</code></pre>

<h3>while</h3>

<pre><code class="Python">while conditon:
    doSomething
</code></pre>

<h3>range([start, ] end [, step])</h3>

<pre><code class="Python">range(5)            # =&gt; [0, 1, 2, 3, 4]
range(1, 5)         # =&gt; [1, 2, 3, 4]
range(1, 5, 2)      # =&gt; [1, 3]
range(-10, -20, -3) # =&gt; [-10, -13, -16, -19]

for i in range(len(aList)):
    print i, aList[i]
</code></pre>

<h3>function</h3>

<p>函数参数的默认值仅生效一次（why？），在其为可变对象（如 list，dictionary 等）时，可能会带来困扰。如：</p>

<pre><code class="python">def f(a, L=[]):
    L.append(a)
    return L

print f(1)      # =&gt; [1]
print f(2)      # =&gt; [1, 2]
print f(3)      # =&gt; [1, 2, 3]
</code></pre>

<p>调用函数时，一旦某个参数使用了命名参数形式，则其后面的参数都必须使用命名参数形式。</p>

<h3>*args 和 **keywords</h3>

<p>定义函数时，args 表示用一个 args 元组来代表后面任意多个基于位置的参数，**keywords 则用一个 dict 来记录后面的基于命名的参数，且必须在 args 后面。</p>

<pre><code class="python">def t(a, b, *c, **d):
    print 'a: ', a
    print 'b: ', b
    for i in c:
        print '-', i
    keys = sorted(d.keys())
    for k in keys:
        print k, ':', d[k]

t(1, 2, 3, 4, d=5, e=6, f=7)    # =&gt;
                                    a: 1
                                    b: 2
                                    - 3
                                    - 4
                                    d : 5
                                    e : 6
                                    f : 7
</code></pre>

<p>调用函数时，使用 *args 和 **keywords 可以展开一个 tuple/list 和 dict 来传参。</p>

<pre><code class="python">args = [3, 6]
range(*args)    # =&gt; [3, 4, 5]
</code></pre>

<h2>Doc Strings</h2>

<pre><code class="python">def t():
    """Short summary.

    Other description.
    """
    pass
</code></pre>

<h2>Data Structures</h2>

<h3>list</h3>

<p>methods: <code>list.append(x), list.count(x), list.extend(L), list.index(x), list.insert(i, x), insert.pop([i]), list.remove(x), list.reverse(), list.sort()</code></p>

<p>list.sort() 和 list.reverse() 是原地修改的，返回值是 <code>None</code></p>

<p>list comprehension 在规则简单的情况下比 filter 和 map 更简洁易读。</p>

<pre><code class="python">squares = [x ** 2 for x in range(10)]
[(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]

vec = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
[num for elem in vec for num in elem]   # =&gt; [1, 2, 3, 4, ..., 9]
</code></pre>

<h3>tuple</h3>

<pre><code class="python">t = 1, 2, 'a'       # =&gt; (1, 2, 'a')
u =  1,             # =&gt; (1, )
v = (1, )           # =&gt; (1, )
a, b, c = t         # =&gt; a = 1, b = 3, c = 'a'
</code></pre>

<h3>set</h3>

<p>set（集合）是无序去重的结构，支持 in，-， |， &amp;，^ 等操作。</p>

<pre><code class="Python">a = set('abr')
b = set('ac')
a - b               # =&gt; set(['b', 'r'])
a | b               # =&gt; set(['a', 'b', 'c', 'r'])
a &amp; b               # =&gt; set(['a'])
a ^ b               # =&gt; set(['b', 'c', 'r'])
</code></pre>

<p><code>pop()</code> 随机返回并移除 set 中的一个元素，当为空时返回 <code>KeyError</code> 异常。</p>

<p><code>remove(element)</code> 移除 set 中指定的元素，当其不存在时，返回 <code>KeyError</code> 异常。</p>

<h3>dictionary</h3>

<p>除了字面量构建 dict 外，还可以从 tuple 的 list 或命名参数赋值的方式来构建，如：</p>

<pre><code class="python">dict([('a', 1), ('b', 2)])
dict(a=1, b=2)
</code></pre>

<p><code>dict.keys()</code> 获取所有的 key 组成的 list，<code>dict.values()</code> 获取所有的 value 组成的 list，<code>dict.items()</code> 或得 (key, value) 的 list。</p>

<h2>loop</h2>

<p>在 for in 循环中，若需要 index，除了使用 range 的方式外，还可以使用 <code>enumerate</code> 函数。</p>

<pre><code class="python">for i, v in enumerate(['tic', 'tac', 'toc']):
    print i, v
</code></pre>

<p>同时遍历多个序列，先使用 zip 处理一下或会更好一点。</p>

<pre><code class="python">a = ['a', 'b', 'c']
b = [1, 2, 3]
for i, j in zip(a, b):
    print i, j
</code></pre>

<h2>Input &amp; Output</h2>

<p><code>print 1</code>, 最后带 <code>,</code> 这种方式将不会自动换行。</p>

<p>下面这些函数可用来作为输出布局，都是返回一个新的字符串（String 是不可变的），当字符串长度大于 width 时，返回原字符串的拷贝，不作任何修改。</p>

<pre><code class="python">str.rjust(width[, fillchar]);
str.ljust(width [, fillchar];
str.center(width [, fillchar]);
str.zfill(width);
</code></pre>

<h3>str.format</h3>

<pre><code class="python">str.format( *args, **kargs)  # =&gt; unicode
</code></pre>

<p>str 中用 <code>{}</code> 来代表预置的变量，可存在着多个，比如：<code>'first: {}, second: {}'.format(1, 2)</code>；也可以用 <code>{3}</code> 这样的方式来指定使用第4个参数（从0开始）；如果<code>format</code>中的参数带命名，那么还可以采用这样的方式：<code>'a: {a}'.format(1, a=2)</code>。</p>

<p>可以使用 <code>:</code> 来指定更加详细高级的格式，比如 <code>'a: {a:.3f}'.format(a=3.141592535)' # =&gt; 3.142</code> 从定义可知，还可以采用参数展开的方法来给 <code>format</code> 传参。</p>

<h3>str % var</h3>

<p>This is the old style formatting. <code>'abc %s %d' % ('happy', 1)</code></p>

<h3>file.seek(offset, from_what)</h3>

<p><code>from_what</code> 有 3 个值， 0（默认值）、1 和 2，分别代表 文件头、当前位置和文件尾。</p>

<h2>Errors &amp; Exceptions</h2>

<p>可以用 <code>except (Exception1, Exception2)</code> 的方式来对多种异常做相同的处理；<code>except Exception1</code>, <code>e</code> 是 <code>except Exception1 as e</code> 的简写；还可以用 <code>raise</code> 继续往外抛。</p>

<pre><code class="python">import sys

try:
    f = open('file')
    s = f.readline()
    i = int(s.strip())
    s = i + str(notExist)
except (IOError, ValueError) as e:
    print "File content error({0}): {1}".format(e.errno, e.strerror)
except NameError:
    print "Not exist variable: notExist"
except:
    print 'other exception no expected'
    raise
</code></pre>

<p>raise 出来的异常对象（e）可带有信息，这些存在 <code>e.args</code> 这个元组中，并且，Exception 对象的 <code>__str__</code> 默认作了 print args 的效果，故不用特意去 print。</p>

<pre><code class="python">`raise Exception('spam', 'eggs')`
</code></pre>

<p><code>try except</code> 后还可带 else 和 finally 块，前者在无异常发生时执行，而后者则总会执行到。</p>

<h2>Classes</h2>

<h3>Names &amp; Objects</h3>

<p>对象（Object）是独立自由的，可以用多个名字（Names）来指向它。可以认为 Name 是 Object 的别名（Alias）或软链接、快捷方式之类。Python 中，参数传递和赋值使用的都是 Name 而不是直接使用 Object，因此，传参的代价就很小了。</p>

<h3>Namespaces &amp; Scopes</h3>

<p>对于运行时的可直接访问的 Namespaces，有以下作用域：</p>

<ul>
<li>最里层作用域，最先查找，包含局部变量</li>
<li>外包装函数作用域，一层层往外查找，包含了非当前局部变量和非全局变量</li>
<li>模块作用域，包含了模块全局变量</li>
<li>最外层（最后查找）的是内置（built-in）作用域，包含了内置变量</li>
</ul>


<p>Assignments do not copy data – they just bind names to objects.</p>

<h3>class</h3>

<pre><code class="python">class MyClass:
    """class doc"""
    i = 123456
    def f(self):
        return 'hello'

MyClass.i   # =&gt; 123456
MyClass.f   # =&gt; &lt;unbound method MyClass.f&gt;
</code></pre>

<p><code>__init__</code> 充当构造函数（如果需要）。</p>

<pre><code class="python">x = MyClass()
x.i         # =&gt; 123456
x.f         # =&gt; &lt;bound method MyClass.f of ..... at 0x....&gt;
</code></pre>

<p><em>Notes</em>: 称 MyClass.f 为 function，称 x.f 为 method。</p>

<pre><code class="python">def df():
    print 'df'

x.df = df   # =&gt; 认为这是一个 data attribute 而不是 method attribute
</code></pre>

<p><code>x.f()</code> 实质为 <code>MyClass.f(x)</code>。</p>

<p>调用一个实例的属性（attribute）的过程是：首先看是否是 data attribute，是则返回；否则搜索其 class，挡在其 class 中找到对应名字的 function，则用该实例和对应的 function 创建一个 method 对象。当调用该 method 对象时，用该实例和 method 对象实参组成的新实参来调用 class 的 function。</p>

<p>类实例的 class 属性指向该类。</p>

<p>继承机制中，子类的 data attribute 和 method attribute 将会覆盖基类的对应 attribute。这包括 method 调用的 method，如：</p>

<pre><code class="python">class A():
    def p(self):
        print 'a'
    def l(self):
        self.p()

class B(A):
   def p(self):
       print 'b'

b = B()
b.l()           # =&gt; 'b'
</code></pre>

<p>B 的实例 b 调用继承自 A 的 method <code>l</code>，里面又调用了 p method，此时，调用的是 B 中 override 后的 method。</p>

<h2>Iterators</h2>

<pre><code class="python">s = 'abc'
it = iter(s)
it.next()   # =&gt; 'a'
it.next()   # =&gt; 'b'
it.next()   # =&gt; 'c'
it.next()   # =&gt; StopIteration
</code></pre>

<p>若需要对一个 class 实现 for in 迭代，只需要定义 iter 和 next 方法即可，其中，iter 返回 self，next 负责返回当前结果，越界时抛出 StopIteration 异常。</p>

<pre><code class="python">class Reverse:
    def __init__(self, data):
        self.data = data
        self.index = len(data)
    def __iter__(self):
        return self
    def next(self):
        if self.index == 0:
            raise StopIteration
        self.index = self.index - 1
        return self.data[self.index]
</code></pre>

<h2>Generators</h2>

<p>和普通函数相同，只是在该 return 时使用 <code>yield</code>。</p>

<pre><code class="python">def reverse(data):
    for index in range(len(data)-1, -1, -1):
        yield data[index]
</code></pre>

<h2>Standard Library</h2>

<h3>Operating System Interface</h3>

<p>use <code>import os</code> instead of <code>from os import *</code>, this will keep <code>os.open()</code> shadowing the built-in <code>open()</code> function which operates much differently.</p>

<p><code>os.system(command)</code> execute the command(a string) in a subshell.</p>

<p>for high level file and directory tasks, the shutil module is much more easier.</p>

<h3>文件通配查找</h3>

<pre><code class="python">glob.glob(pathname)
</code></pre>

<h3>Command Line Arguments</h3>

<p><code>sys</code> 模块中常用的是 <code>sys.argv</code>，<code>getopt</code> 和 <code>argparse</code> 可以提供更高级的参数处理。</p>

<h3>性能测量</h3>

<p>timeit, profile, pstats</p>

<pre><code class="python">from timeit import Timer
Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
</code></pre>

<h3>测试</h3>

<p><code>doctest</code> 允许运行以一定规则写在 docstring 中的代码，并判断是否和给出的结果相符，若有失败，则输出信息。</p>

<pre><code class="python">def average(values):
    """Computes the arithmetic mean of a list of numbers

    &gt;&gt;&gt; print average([20, 30, 70])
    40.0
    """
    return sum(values, 0.0) / len(values)

import doctest
doctest.testmod()
</code></pre>

<h4>unittest</h4>

<pre><code class="python">import unittest

class TestStatisticalFunctions(unittest.TestCase):

    def test_average(self):
        self.assertEqual(average([20, 30, 70]), 40.0)
        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)
        self.assertRaises(ZeroDivisionError, average, [])
        self.assertRaises(TypeError, average, 20, 30, 70)

unittest.main() # Calling from the command line invokes all tests
</code></pre>
]]></content>
  </entry>
  
</feed>
