<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | memos]]></title>
  <link href="http://liunian.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://liunian.github.io/"/>
  <updated>2015-12-28T17:17:45+08:00</updated>
  <id>http://liunian.github.io/</id>
  <author>
    <name><![CDATA[流年]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generator in ES6]]></title>
    <link href="http://liunian.github.io/blog/generator-in-es6/"/>
    <updated>2015-12-28T17:13:20+08:00</updated>
    <id>http://liunian.github.io/blog/generator-in-es6</id>
    <content type="html"><![CDATA[<p>生成器（Generator）是一个由生成器函数返回的对象，其既是一个迭代器，也是一个可迭代对象。</p>

<p>生成器函数则是一个使用 <code>function*</code> 来声明的函数，如：</p>

<pre><code class="js">function* gen() {
}
</code></pre>

<h2>能够暂停的函数</h2>

<p>由于 JavaScript 是单线程的，所以一旦执行一个函数，那么一定是按顺序执行完函数体里的语句才能执行这个函数后面的语句。</p>

<p>生成器提供一个能力，可以在指定地方暂停，然后再在需要的时候回到暂停处继续执行。</p>

<pre><code class="js">function* gen() {
  console.log(1);
  yield;
  console.log(2);
}

var it = gen();
it.next();
console.log(3);
it.next();
</code></pre>

<p>上面代码中，log 的顺序将是 <code>1 3 2</code>。</p>

<p>首先，调用生成器函数不会运行里面的代码，而是返回一个生成器。对于一个生成器而言，调用 <code>next</code> 方法来开始运行，然后在里面碰到 <code>yield</code> 时暂停里面的运行，而回到 <code>next</code> 调用处继续往下执行；再次调用 <code>next</code>，则回到生成器上次停止的地方继续往下执行，直至碰到 <code>yield</code> 而暂停里面回到外面或执行完毕。</p>

<!-- more -->


<h2>作为可迭代对象使用</h2>

<p>上面说到，生成器也是一个可迭代对象，那么，这样就可以使用 <code>for-of</code> 来迭代。</p>

<pre><code class="js">function* foo() {
    yield 1;
    yield 2;

    return 100;
}

var it = foo();

console.log(it.next());
console.log(it.next());
console.log(it.next());

console.log('=== for of ===');
for (var v of foo()) {
    console.log(v);
}
</code></pre>

<p>由于 <code>for-of</code> 是直接迭代值，所以，log 出来的直接就是 <code>1</code>、<code>2</code> 这样的值。</p>

<p>但需要注意的是，<code>for-of</code> 仅能遍历通过 <code>yield</code> 返回的值，通过 <code>return</code> 返回的值并不在其遍历范围。但 <code>next</code> 是可以拿到的，且 <code>return</code> 时拿到的迭代结果中的 <code>done</code> 是 <code>true</code>。</p>

<h2>生成器内外双向传值</h2>

<p>在调用 <code>next</code> 触发生成器运行到下一个 <code>yield</code> 处时，会同时返回迭代结果；下一次调用 <code>next</code> 时，可以传递一个参数进去，而这个值将是 <code>yield</code> 表达式的值。</p>

<pre><code class="js">function* first() {
    var y = (yield 'foo');
    console.log(1 + y);
    yield 'ok';
}

var it = first();
console.log(it.next());
// send 3 into the place of the first yield as the pass-in value
console.log(it.next(3));
console.log(it.next());
</code></pre>

<p>上面代码输出结果将是</p>

<pre><code>{done: false, value: 'foo'}
4
{done: false, value: 'ok'}
{done: true, value: undefined}
</code></pre>

<ol>
<li>第一次调用 <code>next</code>，生成器在运行了 <code>yield 'foo'</code> 后暂停，把 <code>foo</code> 给 <code>next</code> 返回；</li>
<li>调用 <code>next(3)</code>，回到第一次 yield 的地方，把传入的 <code>3</code> 作为 yield 表达式的值赋给 <code>y</code>；然后运行到第二个 <code>yield</code> 处暂停，向 <code>next</code> 调用提供 <code>'ok'</code>；中间 log 了一下；</li>
<li>最后调用 <code>next</code>，生成器运行至结束</li>
</ol>


<h2><code>yield*</code> 委托</h2>

<p><code>yield*</code> 的作用是迭代一个可迭代对象，把拿到的值再 yield 出去。</p>

<pre><code class="js">function* foo() {
    yield 3;
    yield 4;
}

function* bar() {
    yield 1;
    yield 2;
    yield* foo();
    yield 5;
}

for (var v of bar()) {
    console.log(v); // 1 2 3 4 5
}
</code></pre>

<p><code>yield*</code> 这个表达式本身的值是迭代可迭代对象最后返回的值（第一次 done 是 true 时的值），一般地是 <code>undefined</code>，如果是委托了一个生成器，并且这个生成器最后有 return，那么表达式的值则是 return 的值。</p>

<h2>错误捕捉</h2>

<p>可以对生成器函数体做捕捉，也可以对生成器的调用做捕捉。</p>

<pre><code class="js">function* foo() {
    try {
        var x = yield 3;
        console.log(x);
        x();
    } catch (err) {
        console.log('Error: ' + err);
    }
}

var it = foo();
it.next();
it.next();


// catch from the outside
function* bar() {
    var x = yield 3;
    console.log(x);
    x();
}

var it2 = bar();
it2.next();
try {
    it2.next();
} catch (err) {
    console.log(err);
}
</code></pre>

<h2>异步</h2>

<p>生成器能在 yield 时暂停，next 的时候再继续运行。这样，或许能在碰到异步操作时 yield 来暂停，异步完成后再 next 继续运行，从而解决回调嵌套过深以及带来的理解问题。</p>

<h3>常见的嵌套回调</h3>

<pre><code class="js">function asyncA(callback) {
  setTimeout(() =&gt; callback(1), 1000);
}

function asyncB(input, callback) {
  setTimeout(() =&gt; callback(input + 1), 1000);
}

asyncA((data) =&gt; {
  console.log('asyncA data', data);
  asyncB(data, (newData) =&gt; console.log('asyncB data', newData));
});
</code></pre>

<h3>尝试使用 generator</h3>

<pre><code class="js">var it;

function a() {
  setTimeout(() =&gt; it.next(1), 1000);
}

function b(input) {
  setTimeout(() =&gt; it.next(input + 1), 1000);
}

function* gc() {
  var dataA = yield a();
  console.log('dataA', dataA);
  var dataB = yield b(dataA);
  console.log('dataB', dataB);
}

var it = gc();
it.next();
</code></pre>

<p>两个异步的调用和依赖看起来是和同步一样一条路下来了，但却对异步函数本身造成了入侵。一来依赖了一个外部迭代器；二来，无法在多次运行的场景保证正确。</p>

<h3>generator 配合 promise</h3>

<p>上面的例子中，之所以会造成入侵，是因为需要在异步完成后通知生成器来继续运行，而异步代码本身没提供完成态的钩子。</p>

<p>ES6 中提供了 Promise，可以设置异步完成或错误时的相应行为。</p>

<p>这样，可以异步行为的函数返回一个 promise，然后在 promise 的 then 中调用 next。但这个过程不应手动，否则直接使用 promise 就可以了，没必要再配合 generator。应该让 next 的过程自动完成，方法是使用一个运行器。</p>

<pre><code class="js">function runGenerator(g) {
  var it = g(), ret;

  (function iter(val) {
    ret = it.next(val);
    if (!ret.done) {
      // 简化，假定一定是返回 promise
      ret.value.then(iter);
    }
  })();
}

function a2() {
  return new Promise(function(resolve, reject) {
    setTimeout(() =&gt; resolve(1), 1000);
  });
}

function b2(input) {
  return new Promise(function(resolve, reject) {
    setTimeout(() =&gt; resolve(input + 1), 1000);
  });
}

runGenerator(function*() {
  var res1 = yield a2();
  console.log('res1', res1);
  var res2 = yield b2(res1);
  console.log('res2', res2);
});
</code></pre>

<p>可以看到，这样，异步函数本身保持了纯净，调用过程也能和同步一样看起来顺畅，把复杂性放到了运行器中。当然，这个运行器只是一个简单的模拟，实际需要考虑不是返回 promise 的情况，promise 里是 reject 的情况。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://hacks.mozilla.org/2015/05/es6-in-depth-generators/">ES6 In Depth: Generator</a></li>
<li><a href="https://davidwalsh.name/async-generators">async generators</a></li>
<li><a href="http://www.2ality.com/2015/03/no-promises.html">No promises: asynchronous JavaScript with only generators</a></li>
<li><a href="https://www.twilio.com/blog/2015/10/asyncawait-the-hero-javascript-deserved.html">Async/Await: The Hero JavaScript Deserved</a></li>
<li><a href="https://tc39.github.io/ecmascript-asyncawait/">Async Functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterator in ES6]]></title>
    <link href="http://liunian.github.io/blog/iterator-in-es6/"/>
    <updated>2015-12-24T16:17:41+08:00</updated>
    <id>http://liunian.github.io/blog/iterator-in-es6</id>
    <content type="html"><![CDATA[<p><code>for-of</code> 使用迭代器（iterator）来迭代一个可迭代（iterable）的对象，主要是想取代传统的比较繁琐的 <code>for</code> 及会遍历非自带属性以及无法 <code>continue/break/return</code> 的 <code>forEach</code>，其基本示例如：</p>

<pre><code class="js">for (let i of [1, 2, 3]) {
    console.log(i);
}
</code></pre>

<p><code>for-of</code> 默认支持了数组、字符串、类数组以及 ES6 中的 Map 和 Set 等，但不支持平对象（字面量对象）（实际支持情况还看浏览器，比如在此刻 firefox 支持了 NodeList，但 Chrome 还不支持）。</p>

<p>迭代 Map 可以像上面那样使用单变量来在每次迭代时得到一个数组，也可以配合列表结构来直接得到 key 和 value。</p>

<pre><code class="js">let aMap = new Map();
aMap.set('a', 1)
aMap.set('b', [2]);

for (let [k, v] of aMap) {
  console.log(k, v);
}
</code></pre>

<!-- more -->


<h2>迭代器</h2>

<p>一个对象只要遵循迭代器协议就是一个迭代器。</p>

<h3>迭代器协议</h3>

<p>实现了 <code>.next()</code> 方法，该方法返回一个字面量对象，里面需要有两个属性，<code>done</code> 表示是否迭代了最后，<code>value</code> 则是每次迭代需要返回的值。</p>

<h2>可迭代对象</h2>

<p>一个对象只要遵循了下面的协议，那么就是可迭代对象。</p>

<h3>可迭代协议</h3>

<p>一个对象或其原型上有 <code>@@iterator</code> 函数（ <code>[Symbol.iterator]</code>），该函数无实参，返回一个遵循迭代器协议的对象。</p>

<p>下面是一个简单的迭代器（同时也是一个可迭代对象），for-of 将会输出 5 4 3 2 1.</p>

<pre><code class="js">var fiveTimesIterator = {
  _count: 5,
    return this;
  },
  next: function () {
    if (this._count == 0) {
      this._count = 5;
      return {done: true, value: 0};
    } else {
      return {done: false, value: this._count--};
    }
  }
};

for(var f of fiveTimesIterator) {
  console.log(f);
}
</code></pre>

<h2>参考资料</h2>

<ul>
<li><a href="https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/">ES6 In Depth: Iterators and the for-of loop</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">Iteration protocols</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 严格模式]]></title>
    <link href="http://liunian.github.io/blog/javascript-strict-mode/"/>
    <updated>2015-08-01T00:29:35+08:00</updated>
    <id>http://liunian.github.io/blog/javascript-strict-mode</id>
    <content type="html"><![CDATA[<p>严格模式的提出是为了约束一些 JavaScript 的使用方式，修改一些容易导致失误和安全问题的地方。因为严格模式和非严格模式下的语义有所不同，所以使用上需要谨慎，最好渐进的使用。</p>

<h2>使用</h2>

<p>有两种使用方式，影响整个脚本的脚本方式和影响函数的方式。</p>

<h3>脚本方式</h3>

<p>在脚本最前面（需要是第一个有效语句，注释不是）添加 <code>'use strict';</code>，只是字符串，所以可以用双引号或单引号。</p>

<pre><code class="js">// Whole-script strict mode syntax
'use strict';
var v = "Hi! I'm a strict mode script!";
</code></pre>

<!-- more -->


<h3>函数方式</h3>

<pre><code class="js">function strict(){
  // Function-level strict mode syntax
  'use strict';
  function nested() { return "And so am I!"; }
  return "Hi!  I'm a strict mode function!  " + nested();
}

function notStrict() { return "I'm not strict."; }
</code></pre>

<h2>变更</h2>

<p>严格模式影响了语法和语义。</p>

<h3>把失误转为错误</h3>

<ul>
<li>防止无意间创建全局变量</li>
</ul>


<pre><code class="js">'use strict';

mistypedVariable = 17;  // 拼写失误或故意不用 var 来声明将抛异常
</code></pre>

<ul>
<li>把静默失败的赋值调整为抛出异常</li>
</ul>


<p>包括 <code>NaN</code>，非严格模式下给不可写、只读的属性赋值，给不可扩展、sealed 或 froze 的对象添加属性会静默失败，严格模式下会抛出异常。</p>

<pre><code class="js">"use strict";

// throws exception
NaN = 1;

// Assignment to a non-writable property
var obj1 = {};
Object.defineProperty(obj1, "x", { value: 42, writable: false });
obj1.x = 9; // throws a TypeError

// Assignment to a getter-only property
var obj2 = { get x() { return 17; } };
obj2.x = 5; // throws a TypeError

// Assignment to a new property on a non-extensible object
var fixed = {};
Object.preventExtensions(fixed);
fixed.newProp = "ohai"; // throws a TypeError
</code></pre>

<ul>
<li>删除不可移除的属性时报错（以前是返回 false 表示不可移除）</li>
</ul>


<pre><code class="js">"use strict";
delete Object.prototype; // throws a TypeError
</code></pre>

<ul>
<li>对象字面量存在相同的 key 时报错</li>
</ul>


<p>以前会取最后一个 key 的值为该 key 的值。</p>

<pre><code class="js">"use strict";
var o = { p: 1, p: 2 }; // !!! syntax error
</code></pre>

<ul>
<li>函数的参数名必须唯一</li>
</ul>


<p>非严格模式下会取重复参数名最后的一个作为参数的值，但可以通过 <code>arguments</code> 来获取完整的参数。</p>

<pre><code class="js">function sum(a, a, c){ // !!! syntax error
  "use strict";
  return a + b + c; // wrong if this code ran
}
</code></pre>

<ul>
<li>不允许使用八进制语法</li>
</ul>


<p>虽然说不上好坏，但严格模式的确是禁止了使用八进制语法。</p>

<pre><code class="js">"use strict";
var sum = 015 + // !!! syntax error
          197 +
          142;
</code></pre>

<h3>简化变量的使用</h3>

<ul>
<li>禁止使用 <code>with</code></li>
<li><code>eval</code> 不再在作用域（全局或局部）中生成新的变量</li>
<li>不允许删除普通变量（需要删除对象属性）</li>
</ul>


<pre><code class="js">"use strict";

var x;
delete x; // !!! syntax error

eval("var y; delete y;"); // !!! syntax error
</code></pre>

<h3>简化 <code>eval</code> 和 <code>arguments</code></h3>

<ul>
<li>不能被赋值和作为参数或函数名等</li>
</ul>


<pre><code class="js">"use strict";
eval = 17;
arguments++;
++eval;
var obj = { set p(arguments) { } };
var eval;
try { } catch (arguments) { }
function x(eval) { }
function arguments() { }
var y = function eval() { };
var f = new Function("arguments", "'use strict'; return 17;");
</code></pre>

<ul>
<li><code>arguments</code> 中的成员不是引用（意味着把实参拷贝到 arguments 中）</li>
</ul>


<blockquote><p>注意：至少在 node.js 0.12.7 中是浅拷贝而不是深拷贝。这样如果不是改变整个参数而是修改参数的属性时，会双向影响</p></blockquote>

<p>非严格模式下，修改实参会改变 arguments，但严格模式下不会改变；同样地，改变 arguments 中的值不会改变实参。这样意味着双方将独立变化。</p>

<pre><code class="js">function f(a){
  "use strict";
  a = 42;
  return [a, arguments[0]];
}
var pair = f(17);
console.assert(pair[0] === 42);
console.assert(pair[1] === 17);
</code></pre>

<ul>
<li>不能使用 <code>arguments.callee</code></li>
</ul>


<p>请使用命名函数</p>

<pre><code class="js">"use strict";
var f = function() { return arguments.callee; };
f(); // throws a TypeError
</code></pre>

<h3>更「安全」</h3>

<ul>
<li>函数中的 this 不再被强制装箱包装成对象，这意味着对于普通调用，<code>this</code> 将是 <code>undefined</code> 而不是非严格模式下的 <code>global</code>（浏览器中是 <code>window</code>）。</li>
<li>无法遍历调用栈，<code>fn.caller</code>、<code>fn.arguments</code> 等禁止访问</li>
</ul>


<pre><code class="js">function restricted()
{
  "use strict";
  restricted.caller;    // throws a TypeError
  restricted.arguments; // throws a TypeError
}
function privilegedInvoker()
{
  return restricted();
}
privilegedInvoker();
</code></pre>

<ul>
<li>禁止使用 <code>arguments.caller</code></li>
</ul>


<pre><code class="js">"use strict";
function fun(a, b)
{
  "use strict";
  var v = 12;
  return arguments.caller; // throws a TypeError
}
fun(1, 2); // doesn't expose v (or a or b)
</code></pre>

<h3>为后续 ECMAScript 版本做准备</h3>

<ul>
<li>部分标识符变为保留字，包括 <code>implements</code>、<code>interface</code>、<code>let</code>、<code>package</code>、<code>private</code>、<code>protected</code>、<code>public</code>、<code>static</code> 和 <code>yield</code>。</li>
<li>禁止函数声明提升（注意，变量依然 ok），相应地，禁止了在块（如 if）中声明函数</li>
</ul>


<pre><code class="js">"use strict";
if (true){
  function f() { } // !!! syntax error
  f();
}

for (var i = 0; i &lt; 5; i++){
  function f2() { } // !!! syntax error
  f2();
}

function baz(){ // kosher
  function eit() { } // also kosher
}
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">Strict mode</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
