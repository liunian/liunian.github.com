<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | memos]]></title>
  <link href="http://liunian.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://liunian.github.io/"/>
  <updated>2015-12-28T17:29:25+08:00</updated>
  <id>http://liunian.github.io/</id>
  <author>
    <name><![CDATA[流年]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arrow function in ES6]]></title>
    <link href="http://liunian.github.io/blog/arrow-function-in-es6/"/>
    <updated>2015-12-28T17:27:28+08:00</updated>
    <id>http://liunian.github.io/blog/arrow-function-in-es6</id>
    <content type="html"><![CDATA[<p>Arrow function 的使用一来能简化匿名函数的使用，二来能解决匿名函数中不时碰到的 <code>this</code> 指向的问题。</p>

<p>在 JavaScript 中，大量地使用到匿名函数，比如事件绑定和像 map/reduce/filter 等这些方法中。</p>

<pre><code class="js">var selected = allJobs.filter(function (job) {
  return job.isSelected();
});
</code></pre>

<p>使用 arrow function 后，可以简化为下面这样：</p>

<pre><code class="js">var selected = allJobs.filter(job =&gt; job.isSelected());
</code></pre>

<!-- more -->


<p>可以注意到的是，在上面的语句中，不需要显示地 return。</p>

<p>在多参数的情况下或无参数的情况下，参数列表需要用 <code>()</code> 来包围，如：</p>

<pre><code class="js">// ES5
var total = values.reduce(function (a, b) {
  return a + b;
}, 0);

// ES6
var total = values.reduce((a, b) =&gt; a + b, 0);
</code></pre>

<p>在函数体不是一个语句的时候，需要用 <code>{}</code> 来包住，并且这个时候将需要显示的 <code>return</code> 才会返回值。</p>

<pre><code class="js">// ES5
$("#confetti-btn").click(function (event) {
  playTrumpet();
  fireConfettiCannon();
});

// ES6
$("#confetti-btn").click(event =&gt; {
  playTrumpet();
  fireConfettiCannon();
});
</code></pre>

<h2>this</h2>

<p>arrow function 没有自己的 this 值，任何情况下 arrow function 里的 this 的值都是继承自 arrow function 的上下文。</p>

<p>这同时也意味着，即便使用 <code>call</code> 或 <code>apply</code>，也不会改变 <code>this</code> 的指向。</p>

<pre><code class="js">let i = {
  a: function() {
    return 'i.a'
  }
}

let obj = {
  a: function() {
    return 'obj.a'
  },
  b: function() {
    setTimeout(() =&gt; {
      console.log('obj.b', this.a())
    }, 1000)
  },
  c: function() {
    var f = function() {
      console.log('obj.c', this.a())
    }
    f.call(i)
  },
  d: function() {
    var f = () =&gt; console.log('obj.d', this.a())
    f.call(i)
  }
}

obj.b() // obj.b obj.a
obj.c() // obj.c i.a
obj.d() // obj.d obj.a
</code></pre>

<h2>参考资料</h2>

<ul>
<li><a href="https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/">ES6 In Depth: Arrow functions</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">Arrow functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rest parameters and defaults in ES6]]></title>
    <link href="http://liunian.github.io/blog/rest-parameters-and-defaults-in-es6/"/>
    <updated>2015-12-28T17:25:10+08:00</updated>
    <id>http://liunian.github.io/blog/rest-parameters-and-defaults-in-es6</id>
    <content type="html"><![CDATA[<p>ES6 给函数增加了剩余参数（rest parameters）和参数默认值的功能。</p>

<h2>剩余参数</h2>

<p>因为 JavaScript 并没有重载功能，以及为了支持可变参数的情况，是通过 <code>arguments</code> 来实现的。ES6 增加了剩余参数这个功能，希望能简化下这种情况下的实现。</p>

<pre><code class="js">function containsAll(haystack, ...needles) {
  for (let needle of needles) {
    if (haystack.indexOf(needle) === -1) {
      return false;
    }
  }

  return true;
}

console.log(containsAll('abc', 'a', 'b'));
console.log(containsAll('abc', 'a', 'd'));
console.log(containsAll('abc'));
console.log(containsAll());
</code></pre>

<h2>参数默认值</h2>

<p>参数默认值可用来解决以前需要用 <code>param = param || 'default'</code> 或 <code>if</code> 判断设置的情况。</p>

<pre><code class="js">function sayHello(name, word="hello") {
  console.log(`${word}, ${name}`);
}
sayHello('Jimmy');
sayHello('Kate', '你好');
sayHello('Jimmy', undefined);
</code></pre>

<p>ES6 中，由于默认参数的表达式实在调用时自左而右地计算，所以，默认参数可以使用其之前的参数，如下：</p>

<pre><code class="js">function conditionalParameter(a, b=(a==1 ? 2 : 3)) {
  return a + b;
}

console.log(conditionalParameter(2, 5));// 7
console.log(conditionalParameter(1));   // 3
console.log(conditionalParameter(2));   // 5
</code></pre>

<h2>参考资料</h2>

<ul>
<li><a href="https://hacks.mozilla.org/2015/05/es6-in-depth-rest-parameters-and-defaults/">ES6 In Depth: Rest parameters and defaults</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Template Strings in ES6]]></title>
    <link href="http://liunian.github.io/blog/template-strings-in-es6/"/>
    <updated>2015-12-28T17:22:27+08:00</updated>
    <id>http://liunian.github.io/blog/template-strings-in-es6</id>
    <content type="html"><![CDATA[<p>ES6 中的 template string 并不是 Mustache 这类模板库的替代品，最重要的是提供字符串插值功能，但并不提供诸如 if/for 等控制功能</p>

<h2>定义</h2>

<p>普通的字符串是使用 <code>'</code> 或 <code>"</code> 来定义，template string 是使用 &#8220;&#8220;`。</p>

<pre><code class="js">let s = `This is a template string`
</code></pre>

<p>不同的是，template string 可以直接用来定义多行的字符串，并且保留其换行和空白。</p>

<pre><code class="js">let ss = `This is a 
multiple line templat string
  which reserves space`
</code></pre>

<h2>插值</h2>

<p>和普通字符串相比，除了能够方便地定义多行的字符串外，还支持字符串插值，插值处支持任何 JavaScript 表达式，如果表达式返回值不是字符串，那么则按照通用的规则来做转换。</p>

<pre><code class="js">let obj = {
  name: 'obj',
  say: () =&gt; {return 3}
}

let c = `The ${obj.name} says: ${obj.say()}`
console.log(c) // The obj says: 3
</code></pre>

<h2>参考资料</h2>

<ul>
<li><a href="https://hacks.mozilla.org/2015/05/es6-in-depth-template-strings-2/">ES6 In Depth: Template strings</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generator in ES6]]></title>
    <link href="http://liunian.github.io/blog/generator-in-es6/"/>
    <updated>2015-12-28T17:13:20+08:00</updated>
    <id>http://liunian.github.io/blog/generator-in-es6</id>
    <content type="html"><![CDATA[<p>生成器（Generator）是一个由生成器函数返回的对象，其既是一个迭代器，也是一个可迭代对象。</p>

<p>生成器函数则是一个使用 <code>function*</code> 来声明的函数，如：</p>

<pre><code class="js">function* gen() {
}
</code></pre>

<h2>能够暂停的函数</h2>

<p>由于 JavaScript 是单线程的，所以一旦执行一个函数，那么一定是按顺序执行完函数体里的语句才能执行这个函数后面的语句。</p>

<p>生成器提供一个能力，可以在指定地方暂停，然后再在需要的时候回到暂停处继续执行。</p>

<pre><code class="js">function* gen() {
  console.log(1);
  yield;
  console.log(2);
}

var it = gen();
it.next();
console.log(3);
it.next();
</code></pre>

<p>上面代码中，log 的顺序将是 <code>1 3 2</code>。</p>

<p>首先，调用生成器函数不会运行里面的代码，而是返回一个生成器。对于一个生成器而言，调用 <code>next</code> 方法来开始运行，然后在里面碰到 <code>yield</code> 时暂停里面的运行，而回到 <code>next</code> 调用处继续往下执行；再次调用 <code>next</code>，则回到生成器上次停止的地方继续往下执行，直至碰到 <code>yield</code> 而暂停里面回到外面或执行完毕。</p>

<!-- more -->


<h2>作为可迭代对象使用</h2>

<p>上面说到，生成器也是一个可迭代对象，那么，这样就可以使用 <code>for-of</code> 来迭代。</p>

<pre><code class="js">function* foo() {
    yield 1;
    yield 2;

    return 100;
}

var it = foo();

console.log(it.next());
console.log(it.next());
console.log(it.next());

console.log('=== for of ===');
for (var v of foo()) {
    console.log(v);
}
</code></pre>

<p>由于 <code>for-of</code> 是直接迭代值，所以，log 出来的直接就是 <code>1</code>、<code>2</code> 这样的值。</p>

<p>但需要注意的是，<code>for-of</code> 仅能遍历通过 <code>yield</code> 返回的值，通过 <code>return</code> 返回的值并不在其遍历范围。但 <code>next</code> 是可以拿到的，且 <code>return</code> 时拿到的迭代结果中的 <code>done</code> 是 <code>true</code>。</p>

<h2>生成器内外双向传值</h2>

<p>在调用 <code>next</code> 触发生成器运行到下一个 <code>yield</code> 处时，会同时返回迭代结果；下一次调用 <code>next</code> 时，可以传递一个参数进去，而这个值将是 <code>yield</code> 表达式的值。</p>

<pre><code class="js">function* first() {
    var y = (yield 'foo');
    console.log(1 + y);
    yield 'ok';
}

var it = first();
console.log(it.next());
// send 3 into the place of the first yield as the pass-in value
console.log(it.next(3));
console.log(it.next());
</code></pre>

<p>上面代码输出结果将是</p>

<pre><code>{done: false, value: 'foo'}
4
{done: false, value: 'ok'}
{done: true, value: undefined}
</code></pre>

<ol>
<li>第一次调用 <code>next</code>，生成器在运行了 <code>yield 'foo'</code> 后暂停，把 <code>foo</code> 给 <code>next</code> 返回；</li>
<li>调用 <code>next(3)</code>，回到第一次 yield 的地方，把传入的 <code>3</code> 作为 yield 表达式的值赋给 <code>y</code>；然后运行到第二个 <code>yield</code> 处暂停，向 <code>next</code> 调用提供 <code>'ok'</code>；中间 log 了一下；</li>
<li>最后调用 <code>next</code>，生成器运行至结束</li>
</ol>


<h2><code>yield*</code> 委托</h2>

<p><code>yield*</code> 的作用是迭代一个可迭代对象，把拿到的值再 yield 出去。</p>

<pre><code class="js">function* foo() {
    yield 3;
    yield 4;
}

function* bar() {
    yield 1;
    yield 2;
    yield* foo();
    yield 5;
}

for (var v of bar()) {
    console.log(v); // 1 2 3 4 5
}
</code></pre>

<p><code>yield*</code> 这个表达式本身的值是迭代可迭代对象最后返回的值（第一次 done 是 true 时的值），一般地是 <code>undefined</code>，如果是委托了一个生成器，并且这个生成器最后有 return，那么表达式的值则是 return 的值。</p>

<h2>错误捕捉</h2>

<p>可以对生成器函数体做捕捉，也可以对生成器的调用做捕捉。</p>

<pre><code class="js">function* foo() {
    try {
        var x = yield 3;
        console.log(x);
        x();
    } catch (err) {
        console.log('Error: ' + err);
    }
}

var it = foo();
it.next();
it.next();


// catch from the outside
function* bar() {
    var x = yield 3;
    console.log(x);
    x();
}

var it2 = bar();
it2.next();
try {
    it2.next();
} catch (err) {
    console.log(err);
}
</code></pre>

<h2>异步</h2>

<p>生成器能在 yield 时暂停，next 的时候再继续运行。这样，或许能在碰到异步操作时 yield 来暂停，异步完成后再 next 继续运行，从而解决回调嵌套过深以及带来的理解问题。</p>

<h3>常见的嵌套回调</h3>

<pre><code class="js">function asyncA(callback) {
  setTimeout(() =&gt; callback(1), 1000);
}

function asyncB(input, callback) {
  setTimeout(() =&gt; callback(input + 1), 1000);
}

asyncA((data) =&gt; {
  console.log('asyncA data', data);
  asyncB(data, (newData) =&gt; console.log('asyncB data', newData));
});
</code></pre>

<h3>尝试使用 generator</h3>

<pre><code class="js">var it;

function a() {
  setTimeout(() =&gt; it.next(1), 1000);
}

function b(input) {
  setTimeout(() =&gt; it.next(input + 1), 1000);
}

function* gc() {
  var dataA = yield a();
  console.log('dataA', dataA);
  var dataB = yield b(dataA);
  console.log('dataB', dataB);
}

var it = gc();
it.next();
</code></pre>

<p>两个异步的调用和依赖看起来是和同步一样一条路下来了，但却对异步函数本身造成了入侵。一来依赖了一个外部迭代器；二来，无法在多次运行的场景保证正确。</p>

<h3>generator 配合 promise</h3>

<p>上面的例子中，之所以会造成入侵，是因为需要在异步完成后通知生成器来继续运行，而异步代码本身没提供完成态的钩子。</p>

<p>ES6 中提供了 Promise，可以设置异步完成或错误时的相应行为。</p>

<p>这样，可以异步行为的函数返回一个 promise，然后在 promise 的 then 中调用 next。但这个过程不应手动，否则直接使用 promise 就可以了，没必要再配合 generator。应该让 next 的过程自动完成，方法是使用一个运行器。</p>

<pre><code class="js">function runGenerator(g) {
  var it = g(), ret;

  (function iter(val) {
    ret = it.next(val);
    if (!ret.done) {
      // 简化，假定一定是返回 promise
      ret.value.then(iter);
    }
  })();
}

function a2() {
  return new Promise(function(resolve, reject) {
    setTimeout(() =&gt; resolve(1), 1000);
  });
}

function b2(input) {
  return new Promise(function(resolve, reject) {
    setTimeout(() =&gt; resolve(input + 1), 1000);
  });
}

runGenerator(function*() {
  var res1 = yield a2();
  console.log('res1', res1);
  var res2 = yield b2(res1);
  console.log('res2', res2);
});
</code></pre>

<p>可以看到，这样，异步函数本身保持了纯净，调用过程也能和同步一样看起来顺畅，把复杂性放到了运行器中。当然，这个运行器只是一个简单的模拟，实际需要考虑不是返回 promise 的情况，promise 里是 reject 的情况。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://hacks.mozilla.org/2015/05/es6-in-depth-generators/">ES6 In Depth: Generator</a></li>
<li><a href="https://davidwalsh.name/async-generators">async generators</a></li>
<li><a href="http://www.2ality.com/2015/03/no-promises.html">No promises: asynchronous JavaScript with only generators</a></li>
<li><a href="https://www.twilio.com/blog/2015/10/asyncawait-the-hero-javascript-deserved.html">Async/Await: The Hero JavaScript Deserved</a></li>
<li><a href="https://tc39.github.io/ecmascript-asyncawait/">Async Functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterator in ES6]]></title>
    <link href="http://liunian.github.io/blog/iterator-in-es6/"/>
    <updated>2015-12-24T16:17:41+08:00</updated>
    <id>http://liunian.github.io/blog/iterator-in-es6</id>
    <content type="html"><![CDATA[<p><code>for-of</code> 使用迭代器（iterator）来迭代一个可迭代（iterable）的对象，主要是想取代传统的比较繁琐的 <code>for</code> 及会遍历非自带属性以及无法 <code>continue/break/return</code> 的 <code>forEach</code>，其基本示例如：</p>

<pre><code class="js">for (let i of [1, 2, 3]) {
    console.log(i);
}
</code></pre>

<p><code>for-of</code> 默认支持了数组、字符串、类数组以及 ES6 中的 Map 和 Set 等，但不支持平对象（字面量对象）（实际支持情况还看浏览器，比如在此刻 firefox 支持了 NodeList，但 Chrome 还不支持）。</p>

<p>迭代 Map 可以像上面那样使用单变量来在每次迭代时得到一个数组，也可以配合列表结构来直接得到 key 和 value。</p>

<pre><code class="js">let aMap = new Map();
aMap.set('a', 1)
aMap.set('b', [2]);

for (let [k, v] of aMap) {
  console.log(k, v);
}
</code></pre>

<!-- more -->


<h2>迭代器</h2>

<p>一个对象只要遵循迭代器协议就是一个迭代器。</p>

<h3>迭代器协议</h3>

<p>实现了 <code>.next()</code> 方法，该方法返回一个字面量对象，里面需要有两个属性，<code>done</code> 表示是否迭代了最后，<code>value</code> 则是每次迭代需要返回的值。</p>

<h2>可迭代对象</h2>

<p>一个对象只要遵循了下面的协议，那么就是可迭代对象。</p>

<h3>可迭代协议</h3>

<p>一个对象或其原型上有 <code>@@iterator</code> 函数（ <code>[Symbol.iterator]</code>），该函数无实参，返回一个遵循迭代器协议的对象。</p>

<p>下面是一个简单的迭代器（同时也是一个可迭代对象），for-of 将会输出 5 4 3 2 1.</p>

<pre><code class="js">var fiveTimesIterator = {
  _count: 5,
    return this;
  },
  next: function () {
    if (this._count == 0) {
      this._count = 5;
      return {done: true, value: 0};
    } else {
      return {done: false, value: this._count--};
    }
  }
};

for(var f of fiveTimesIterator) {
  console.log(f);
}
</code></pre>

<h2>参考资料</h2>

<ul>
<li><a href="https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/">ES6 In Depth: Iterators and the for-of loop</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">Iteration protocols</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
