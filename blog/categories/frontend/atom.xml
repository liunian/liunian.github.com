<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: frontend | memos]]></title>
  <link href="http://liunian.github.io/blog/categories/frontend/atom.xml" rel="self"/>
  <link href="http://liunian.github.io/"/>
  <updated>2016-09-06T15:02:16+08:00</updated>
  <id>http://liunian.github.io/</id>
  <author>
    <name><![CDATA[流年]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS 蒙版]]></title>
    <link href="http://liunian.github.io/blog/css-masking/"/>
    <updated>2016-09-06T14:40:54+08:00</updated>
    <id>http://liunian.github.io/blog/css-masking</id>
    <content type="html"><![CDATA[<p>使用 CSS 蒙版可以帮助达到类似弹层指引的效果。</p>

<p>css 蒙版的关键点是：黑色表示完全透明展示；白色表示不展示，即图片完全被遮盖，黑色一片；而中间的颜色则表示相应的透明度。</p>

<p>示例代码：</p>

<p>&#8220;`html</p>

<div id="container" style="position: relative;">
    <svg style="position: absolute;" width="400" height="280">
        <defs>
          <mask id="mask3">
            <rect x="0" y="0" width="100%" height="100%" style="stroke:none; fill: #888"></rect>
            <circle id="circle1" cx="100" cy="100" r="50" />
            <rect x="200" y="200" width="100" height="50"></rect>
          </mask>
        </defs>
      
        <rect x="0" y="0" width="100%" height="100%" style="stroke: none; mask: url(#mask3)"></rect>
    </svg>
   
    <img src="http://img6.cache.netease.com/cnews/2014/11/3/20141103100737855b7.jpg" />
</div>


<p>&#8220;`</p>

<p>示例效果：</p>

<!--more-->


<p><a class="jsbin-embed" href="http://jsbin.com/wogunecaqa/embed">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?3.39.15"></script></p>

<h2>参考文档</h2>

<ul>
<li><a href="http://www.html5rocks.com/en/tutorials/masking/adobe/">CSS Masking</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html readonly 属性]]></title>
    <link href="http://liunian.github.io/blog/html-readonly-attribute/"/>
    <updated>2016-07-23T13:15:38+08:00</updated>
    <id>http://liunian.github.io/blog/html-readonly-attribute</id>
    <content type="html"><![CDATA[<p><code>readonly</code> 属性用于控制表单字段不可编辑，但和 <code>disabled</code> 不同，form 表单提交时会把值提交上去。</p>

<p>但对以下表单元素无效，包括 type 是 <code>hidden</code>、<code>range</code>、<code>color</code>、<code>checkbox</code>、<code>radio</code>、<code>file</code> 以及按钮类型（button 或 submit）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ES2015之对象计算属性值（computed property name）]]></title>
    <link href="http://liunian.github.io/blog/es2015-computed-property-name/"/>
    <updated>2016-04-28T10:04:55+08:00</updated>
    <id>http://liunian.github.io/blog/es2015-computed-property-name</id>
    <content type="html"><![CDATA[<p>对于 JavaScript 普通对象，定义和使用一般如下：</p>

<pre><code class="js">var obj = {
     a: 1
};
obj.b = 2;
var k = 'c';
obj[k] = 3;
obj['a'] = 0;
</code></pre>

<p>如果属性名（property name）是变量，那么引用时需要使用 <code>[]</code> 语法。</p>

<p>ES2015 中，使用字面量创建对象时也可以使用变量来创建属性名，具体方案是使用计算属性名（computed property name），使用形式是 <code>[property]</code>，如：</p>

<pre><code class="js">var i = 1;
var obj = {
};
console.log(obj); // {'1': 3}
</code></pre>

<p>并不是只能使用变量，而是可以使用一切表达式，如：</p>

<pre><code class="js">// Computed property names (ES6)
var i = 0;
var a = {
};

console.log(a.foo1); // 1
console.log(a.foo2); // 2
console.log(a.foo3); // 3

var param = 'size';
var config = {
};

console.log(config); // { size: 12, mobileSize: 4 }
</code></pre>

<h2>参考链接</h2>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names">Computed property names</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arrow function in ES6]]></title>
    <link href="http://liunian.github.io/blog/arrow-function-in-es6/"/>
    <updated>2015-12-28T17:27:28+08:00</updated>
    <id>http://liunian.github.io/blog/arrow-function-in-es6</id>
    <content type="html"><![CDATA[<p>Arrow function 的使用一来能简化匿名函数的使用，二来能解决匿名函数中不时碰到的 <code>this</code> 指向的问题。</p>

<p>在 JavaScript 中，大量地使用到匿名函数，比如事件绑定和像 map/reduce/filter 等这些方法中。</p>

<pre><code class="js">var selected = allJobs.filter(function (job) {
  return job.isSelected();
});
</code></pre>

<p>使用 arrow function 后，可以简化为下面这样：</p>

<pre><code class="js">var selected = allJobs.filter(job =&gt; job.isSelected());
</code></pre>

<!-- more -->


<p>可以注意到的是，在上面的语句中，不需要显示地 return。</p>

<p>在多参数的情况下或无参数的情况下，参数列表需要用 <code>()</code> 来包围，如：</p>

<pre><code class="js">// ES5
var total = values.reduce(function (a, b) {
  return a + b;
}, 0);

// ES6
var total = values.reduce((a, b) =&gt; a + b, 0);
</code></pre>

<p>在函数体不是一个语句的时候，需要用 <code>{}</code> 来包住，并且这个时候将需要显示的 <code>return</code> 才会返回值。</p>

<pre><code class="js">// ES5
$("#confetti-btn").click(function (event) {
  playTrumpet();
  fireConfettiCannon();
});

// ES6
$("#confetti-btn").click(event =&gt; {
  playTrumpet();
  fireConfettiCannon();
});
</code></pre>

<h2>this</h2>

<p>arrow function 没有自己的 this 值，任何情况下 arrow function 里的 this 的值都是继承自 arrow function 的上下文。</p>

<p>这同时也意味着，即便使用 <code>call</code> 或 <code>apply</code>，也不会改变 <code>this</code> 的指向。</p>

<pre><code class="js">let i = {
  a: function() {
    return 'i.a'
  }
}

let obj = {
  a: function() {
    return 'obj.a'
  },
  b: function() {
    setTimeout(() =&gt; {
      console.log('obj.b', this.a())
    }, 1000)
  },
  c: function() {
    var f = function() {
      console.log('obj.c', this.a())
    }
    f.call(i)
  },
  d: function() {
    var f = () =&gt; console.log('obj.d', this.a())
    f.call(i)
  }
}

obj.b() // obj.b obj.a
obj.c() // obj.c i.a
obj.d() // obj.d obj.a
</code></pre>

<h2>参考资料</h2>

<ul>
<li><a href="https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/">ES6 In Depth: Arrow functions</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">Arrow functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rest parameters and defaults in ES6]]></title>
    <link href="http://liunian.github.io/blog/rest-parameters-and-defaults-in-es6/"/>
    <updated>2015-12-28T17:25:10+08:00</updated>
    <id>http://liunian.github.io/blog/rest-parameters-and-defaults-in-es6</id>
    <content type="html"><![CDATA[<p>ES6 给函数增加了剩余参数（rest parameters）和参数默认值的功能。</p>

<h2>剩余参数</h2>

<p>因为 JavaScript 并没有重载功能，以及为了支持可变参数的情况，是通过 <code>arguments</code> 来实现的。ES6 增加了剩余参数这个功能，希望能简化下这种情况下的实现。</p>

<pre><code class="js">function containsAll(haystack, ...needles) {
  for (let needle of needles) {
    if (haystack.indexOf(needle) === -1) {
      return false;
    }
  }

  return true;
}

console.log(containsAll('abc', 'a', 'b'));
console.log(containsAll('abc', 'a', 'd'));
console.log(containsAll('abc'));
console.log(containsAll());
</code></pre>

<h2>参数默认值</h2>

<p>参数默认值可用来解决以前需要用 <code>param = param || 'default'</code> 或 <code>if</code> 判断设置的情况。</p>

<pre><code class="js">function sayHello(name, word="hello") {
  console.log(`${word}, ${name}`);
}
sayHello('Jimmy');
sayHello('Kate', '你好');
sayHello('Jimmy', undefined);
</code></pre>

<p>ES6 中，由于默认参数的表达式实在调用时自左而右地计算，所以，默认参数可以使用其之前的参数，如下：</p>

<pre><code class="js">function conditionalParameter(a, b=(a==1 ? 2 : 3)) {
  return a + b;
}

console.log(conditionalParameter(2, 5));// 7
console.log(conditionalParameter(1));   // 3
console.log(conditionalParameter(2));   // 5
</code></pre>

<h2>参考资料</h2>

<ul>
<li><a href="https://hacks.mozilla.org/2015/05/es6-in-depth-rest-parameters-and-defaults/">ES6 In Depth: Rest parameters and defaults</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
