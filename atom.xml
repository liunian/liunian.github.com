<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[memos]]></title>
  <link href="http://liunian.github.io/atom.xml" rel="self"/>
  <link href="http://liunian.github.io/"/>
  <updated>2015-09-29T10:23:02+08:00</updated>
  <id>http://liunian.github.io/</id>
  <author>
    <name><![CDATA[流年]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[shadow dom]]></title>
    <link href="http://liunian.github.io/blog/shadow-dom/"/>
    <updated>2015-09-29T10:17:55+08:00</updated>
    <id>http://liunian.github.io/blog/shadow-dom</id>
    <content type="html"><![CDATA[<p>Shadow DOM 的用途是封装隔离一个元素，从而在组件化的过程中隔离外部样式和 JS 的影响。</p>

<h2>使用</h2>

<h3>创建</h3>

<p>通过在一个元素（A）上创建一个 shadow root 的方式来创建 shadow dom，返回的值成为 shadow root，A 成为 shadow host。</p>

<p>一旦创建了 shadow root，那么宿主元素的原内容将不被展示，而是展示 shadow root 的内容。</p>

<p>可以在一个 shadow host 上创建多个 shadow root（但只有最新的一个会生效，但可以通过 <code>&lt;shadow&gt;&lt;/shadow&gt;</code> 来内嵌引用前一个 shadow；并且目前无法移除 shadow root），还可以把一个 shadow root 里的元素作为 shadow host 来继续创建 shadow root。</p>

<pre><code>&lt;button&gt;Hello, world!&lt;/button&gt;
&lt;script&gt;
var host = document.querySelector('button');
var root = host.createShadowRoot();
root.textContent = 'こんにちは、影の世界!';
&lt;/script&gt;
</code></pre>

<p>通过配合使用 <a href="http://liunian.github.io/blog/html-template/">html template</a> 可以简化创建时的繁琐，如：</p>

<pre><code>var shadow = document.querySelector('#nameTag').createShadowRoot();
var template = document.querySelector('#nameTagTemplate');
var clone = document.importNode(template.content, true);
shadow.appendChild(clone);
</code></pre>

<!-- more -->


<h4>相关属性</h4>

<ul>
<li><code>element.shadownRoot</code>：获取一个元素挂着的生效的 shadow root</li>
<li><code>shadowRoot.host</code>：获取 shadow root 的宿主元素</li>
</ul>


<h3>引用、多个和嵌套</h3>

<h4>引用 host 内容</h4>

<p>创建了 shadow root 后，宿主元素的原内容将不被展示，而是展示 shadow root 的内容，但可以在 shadow root 中使用<code>&lt;content&gt;&lt;/content&gt;</code> 来引用宿主<strong>直接子元素</strong>的内容。</p>

<blockquote><p>下面假定 #host 表示 shadow root 的 host，shadow root 的内容是 #template 里的内容</p></blockquote>

<pre><code>&lt;div id="host"&gt;
    &lt;p&gt;paragraph&lt;/p&gt;
    &lt;div class="a"&gt;with selector .a&lt;/div&gt;
    &lt;div&gt;something in &lt;span&gt;span0&lt;/span&gt;&lt;/div&gt;
    &lt;span&gt;span1&lt;/span&gt;
    &lt;br&gt;
    &lt;span&gt;span2&lt;/span&gt;
&lt;/div&gt;

&lt;template id="template"&gt;
    &lt;header&gt;header&lt;/header&gt;
    &lt;nav&gt;nav&lt;/nav&gt;
    &lt;div class="main"&gt;
        &lt;content&gt;&lt;/content&gt;
    &lt;/div&gt;
    &lt;footer&gt;footer&lt;/footer&gt;
&lt;/template&gt;
</code></pre>

<p>对于上面的代码，<code>#host</code> 标签里的原内容会被投射到 div.main 里。</p>

<p><code>content</code> 是表示选择什么内容来投射到当前位置，默认是投射全部内容。</p>

<p>可以使用 <code>select="immediate_child_selector"</code> 来选择 host 里直接子元素来投射，如 <code>&lt;content select="p"&gt;&lt;/content&gt;</code> 可以引用 <code>p</code>；<code>&lt;content select="span"&gt;&lt;/content&gt;</code> 来引用 span1 和 span2，但不会引用 span0，因为 span0 不是直接子元素。</p>

<p>可以有多个 <code>&lt;content&gt;</code> 标签，但被引用的内容仅能被引用一次，先到先得，后来的将只能在挑剩的里面找匹配的。</p>

<pre><code>&lt;div id="host"&gt;
    &lt;div class="a"&gt;div0&lt;/div&gt;
    &lt;div class="b"&gt;div1&lt;/div&gt;
    &lt;div class="a"&gt;div2&lt;/div&gt;
    &lt;div class="c"&gt;div3&lt;/div&gt;
&lt;/div&gt;

&lt;template id="template"&gt;
    &lt;content select=".a, .b"&gt;&lt;/content&gt;
    &lt;hr&gt;
    &lt;content select="div"&gt;&lt;/content&gt;
&lt;/template&gt;
</code></pre>

<p>上面的例子中， <code>&lt;content select=".a, .b"&gt;&lt;/content&gt;</code> 引用了 div0，div1 和 div2，那么位于其后的 <code>&lt;content select="div"&gt;&lt;/div&gt;</code> 将只能匹配到剩下的一个 div3。</p>

<h4>多个 shadow root 和嵌套</h4>

<p>对于一个宿主，可以创建多个 shadow root，但仅有最新的一个会生效。</p>

<pre><code>&lt;div id="host"&gt;
    &lt;div class="a"&gt;a&lt;/div&gt;
    &lt;div class="b"&gt;b&lt;/div&gt;
    &lt;div class="c"&gt;c&lt;/div&gt;
&lt;/div&gt;

&lt;template id="t1"&gt;
    &lt;content select=".a"&gt;&lt;/content&gt;
&lt;/template&gt;

&lt;template id="t2"&gt;
    &lt;content select=".b"&gt;&lt;/content&gt;
&lt;/template&gt;

&lt;template id="t3"&gt;
    &lt;conent select=".c"&gt;&lt;/conent&gt;
&lt;/template&gt;

&lt;script&gt;
    var $ = function(id) {return document.getElementById(id);},
        host = $('a'),
        t1 = $('t1'),
        t2 = $('t2'),
        t3 = $('t3');

    function addShadow(templateNode) {
        host.appendChild(document.importNode(templateNode.content), true);
    }

    addShadow(t1);
    addShadow(t2);
    addShadow(t3);
&lt;/script&gt;
</code></pre>

<p>上面最终将只展示 <code>div.c</code>。</p>

<h4>嵌套</h4>

<p>但如果在 <code>#t3</code> 的 <code>&lt;content&gt;</code> 后添加 <code>&lt;shadow&gt;&lt;/shadow&gt;</code>，那么则可以引用上一个 shadow root（可以看做是 FILO 的栈），这样展示的 <code>div.c</code> 后会展示 <code>div.b</code>。还可以在 <code>#t2</code> 的 <code>&lt;content&gt;</code> 后添加 <code>&lt;shadow&gt;&lt;/shadow&gt;</code>，那么会在 <code>div.b</code> 后展示 <code>div.a</code>。</p>

<p>需要注意的是，嵌套时，如果使用了 <code>content</code>（有或没 select），那么最外层的 shadow root 引用了的元素将不会被内层的 shadow root 再次引用。</p>

<pre><code>&lt;template id="t1"&gt;
    &lt;content select=".a"&gt;&lt;/content&gt;
    &lt;shadow&gt;&lt;/shadow&gt;
&lt;/template&gt;

&lt;template id="t2"&gt;
    &lt;content select=".b"&gt;&lt;/content&gt;
    &lt;shadow&gt;&lt;/shadow&gt;
&lt;/template&gt;

&lt;template id="t3"&gt;
    &lt;conent select=".c"&gt;&lt;/conent&gt;
    &lt;shadow&gt;&lt;/shadow&gt;
&lt;/template&gt;
</code></pre>

<h3>样式</h3>

<p>shadow root 隔离了普通的的样式，这意味外面的样式影响不了里面的，而里面的也影响不了外面的。</p>

<p>但还是可以通过特定的选择器来在内部对 host 或从外部对内部设置样式。</p>

<h4>在内部设置 host 的样式</h4>

<ul>
<li><code>:host</code>，对 host 设置样式</li>
<li><code>:host(selector)</code>，如果 host 匹配了 selector，那么设置样式</li>
<li><p><code>:host-context(selector)</code>，如果 host 或其祖先元素匹配了 selector，那么设置样式</p>

<p>  :host(x-foo) {
    /<em> Applies if the host is a <x-foo> element.</em>/
  }</p>

<p>  :host(x-foo:host) {
    /<em> Same as above. Applies if the host is a <x-foo> element. </em>/
  }</p>

<p>  :host(div) {  {
    /<em> Applies if the host element is a <div>. </em>/
  }</p></li>
</ul>


<h4>在外部影响内部样式</h4>

<ul>
<li><code>::shadow</code>，选择当前 host 的 shadow root</li>
<li><p><code> /deep/ </code>，选择其 shadow root、子元素的 shadow root 和嵌套的 shadow root</p>

<p>  x-tabs::shadow x-panel::shadow h2 {
    &hellip;
  }</p>

<p>  x-tabs /deep/ x-panel {
    &hellip;
  }</p>

<p>  body /deep/ .library-theme {
    &hellip;
  }</p></li>
</ul>


<h4>投射的元素的样式</h4>

<p>通过 <code>&lt;content&gt;</code> 来投射的元素的样式不是在 shadow root 内生效的，而是受原节点结构相关联的样式影响。这是因为投射过去的元素并不是在 shadow root 内，那只是一个渲染节点而已。</p>

<p>如果需要在 shadow root 内设置投射过来的元素的样式，那么需要使用 <code>::content</code> 伪元素来选择对应的 content 映射空间，然后再接上待匹配的元素的选择器即可，如 <code>::content[select=div] .header</code>。</p>

<h3>遍历</h3>

<p>遍历 shadow root 和其后代元素，可以通过 <code>element.shadowRoot</code> 来获取 shadow root，然后通过选择器 api（<code>querySelector</code> 等） 来获取后代元素。</p>

<p>但需要注意的是，通过 <code>content</code> 来投射的内容并不能这样获取，因为其并不在 shadow 树上。这需要在 <code>content</code> 节点上调用 <code>getDistributedNodes()</code> 来获取所有被引用的节点列表（NodeList）。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">Shadow DOM 101</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/">Shadow DOM 201 - CSS and Styling</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-301/">Shadow DOM 301 - Advanced Concepts &amp; DOM APIs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html template]]></title>
    <link href="http://liunian.github.io/blog/html-template/"/>
    <updated>2015-09-21T17:49:18+08:00</updated>
    <id>http://liunian.github.io/blog/html-template</id>
    <content type="html"><![CDATA[<p>HTML 5.1 计划增加 template 元素，提供一段可被后续被 JavaScript 克隆和插入的代码片段。</p>

<h2>what</h2>

<p><code>&lt;template&gt;&lt;/template&gt;</code> 元素是提供页面渲染是不被解析渲染，但在 JavaScript 使用并插入到文档后才解析渲染的代码片段。其可存放任意合法的 HTML 内容，可位于任何合法的非替换元素里，包括 <code>&lt;head&gt;</code> 等。</p>

<p>如<a href="http://defg.sinaapp.com/demos/template/1.html">示例一</a>：</p>

<pre><code>&lt;template&gt;
    &lt;style&gt;
    div {
        color: red;
    }
    &lt;/style&gt;

    &lt;div&gt;
        &lt;h1&gt;template&lt;/h1&gt;
        &lt;img src="http://holdit.sinaapp.com/300" /&gt;
    &lt;/div&gt;

    &lt;script&gt;
    alert('template');
    &lt;/script&gt;

&lt;/template&gt;
</code></pre>

<p>需要注意的是，这是一个可被重复使用的文档片段，并没有像 Mustache 那样的模板插值（&#8220;）甚至更高级的流程处理的功能。这是一个静态的模板，不是根据数据来动态生成 HTML 字符串。</p>

<!-- more -->


<h2>why</h2>

<p>一直都有着重复使用一段内容（模板）的需求，以前使用的主要方式有两种：</p>

<p>一是使用隐藏的 DOM 元素来存放模板，这样可以直接使用 DOM API 来操作，但浏览器默认会解析结构、发送请求（如果有图片等）和解析脚本（如果有）；</p>

<p>二是使用 script 或 textarea 等默认不会解析的元素来存放，然后后续用 <code>innerHTML</code> 来放进文档，但容易造成 xss。</p>

<p>所以提出这个 <code>template</code> 来直接使用 DOM 来避免 xss，同时也延迟解析。</p>

<h2>how</h2>

<h3>判断是否支持</h3>

<pre><code>function supportsTemplate() {
  return 'content' in document.createElement('template');
}

if (supportsTemplate()) {
  // 检测通过！
} else {
  // 使用旧的模板技术或库。
}
</code></pre>

<h3>获取模板内容</h3>

<pre><code>var templateNode = document.querySelector('template');
var fragDoc = templateNode.content;
</code></pre>

<p>模板的 <code>content</code> 是一个 <code>documentFragment</code>，所以可以对其做 DOM 能做的任何操作，也可以直接把其插入到文档中。</p>

<h3>克隆使用</h3>

<p><a href="http://defg.sinaapp.com/demos/template/2.html">示例二</a></p>

<p>虽然可以直接把模板内容插入文档，但如果需要重复使用，那就不合适了。因为插入后就把内容从模板中移动到了文档中，模板中的内容就是空的了。</p>

<p>这样，可以使用 <code>fragDoc.cloneNode(true)</code> 或 <code>document.importNode(fragDoc, true)</code> 来获取其克隆，然后再做处理。两种克隆方式的差别是：后者还适用于跨文档的情况，比如 iframe 和 shadow dom 这些情况；另，当前测试中（2015-09-18），Chrome 下 importNode 会请求 img 等，但 cloneNode 不会，暂没去确定规范是如何的。</p>

<p>需要注意的是，克隆后，并不会运行模板中的脚本，而是在插入到文档中后才会运行里面的 js 脚本。</p>

<h2>参考文档</h2>

<ul>
<li><a href="http://webcomponents.org/articles/introduction-to-template-element/">Introduction to template element</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/template/">HTML’s new template tag</a></li>
<li><a href="https://html.spec.whatwg.org/multipage/scripting-1.html#the-template-element">w3c template spec</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 严格模式]]></title>
    <link href="http://liunian.github.io/blog/javascript-strict-mode/"/>
    <updated>2015-08-01T00:29:35+08:00</updated>
    <id>http://liunian.github.io/blog/javascript-strict-mode</id>
    <content type="html"><![CDATA[<p>严格模式的提出是为了约束一些 JavaScript 的使用方式，修改一些容易导致失误和安全问题的地方。因为严格模式和非严格模式下的语义有所不同，所以使用上需要谨慎，最好渐进的使用。</p>

<h2>使用</h2>

<p>有两种使用方式，影响整个脚本的脚本方式和影响函数的方式。</p>

<h3>脚本方式</h3>

<p>在脚本最前面（需要是第一个有效语句，注释不是）添加 <code>'use strict';</code>，只是字符串，所以可以用双引号或单引号。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Whole-script strict mode syntax</span>
</span><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="s2">&quot;Hi! I&#39;m a strict mode script!&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>函数方式</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">strict</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// Function-level strict mode syntax</span>
</span><span class='line'>  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">nested</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;And so am I!&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;Hi!  I&#39;m a strict mode function!  &quot;</span> <span class="o">+</span> <span class="nx">nested</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">notStrict</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;I&#39;m not strict.&quot;</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>变更</h2>

<p>严格模式影响了语法和语义。</p>

<h3>把失误转为错误</h3>

<ul>
<li>防止无意间创建全局变量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mistypedVariable</span> <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>  <span class="c1">// 拼写失误或故意不用 var 来声明将抛异常</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>把静默失败的赋值调整为抛出异常</li>
</ul>


<p>包括 <code>NaN</code>，非严格模式下给不可写、只读的属性赋值，给不可扩展、sealed 或 froze 的对象添加属性会静默失败，严格模式下会抛出异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// throws exception</span>
</span><span class='line'><span class="kc">NaN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Assignment to a non-writable property</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj1</span><span class="p">,</span> <span class="s2">&quot;x&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">42</span><span class="p">,</span> <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span> <span class="p">});</span>
</span><span class='line'><span class="nx">obj1</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span> <span class="c1">// throws a TypeError</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Assignment to a getter-only property</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">get</span> <span class="nx">x</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">17</span><span class="p">;</span> <span class="p">}</span> <span class="p">};</span>
</span><span class='line'><span class="nx">obj2</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// throws a TypeError</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Assignment to a new property on a non-extensible object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fixed</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">preventExtensions</span><span class="p">(</span><span class="nx">fixed</span><span class="p">);</span>
</span><span class='line'><span class="nx">fixed</span><span class="p">.</span><span class="nx">newProp</span> <span class="o">=</span> <span class="s2">&quot;ohai&quot;</span><span class="p">;</span> <span class="c1">// throws a TypeError</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>删除不可移除的属性时报错（以前是返回 false 表示不可移除）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">delete</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span> <span class="c1">// throws a TypeError</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>对象字面量存在相同的 key 时报错</li>
</ul>


<p>以前会取最后一个 key 的值为该 key 的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">p</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">p</span><span class="o">:</span> <span class="mi">2</span> <span class="p">};</span> <span class="c1">// !!! syntax error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>函数的参数名必须唯一</li>
</ul>


<p>非严格模式下会取重复参数名最后的一个作为参数的值，但可以通过 <code>arguments</code> 来获取完整的参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">c</span><span class="p">){</span> <span class="c1">// !!! syntax error</span>
</span><span class='line'>  <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span><span class="p">;</span> <span class="c1">// wrong if this code ran</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不允许使用八进制语法</li>
</ul>


<p>虽然说不上好坏，但严格模式的确是禁止了使用八进制语法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">015</span> <span class="o">+</span> <span class="c1">// !!! syntax error</span>
</span><span class='line'>          <span class="mi">197</span> <span class="o">+</span>
</span><span class='line'>          <span class="mi">142</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>简化变量的使用</h3>

<ul>
<li>禁止使用 <code>with</code></li>
<li><code>eval</code> 不再在作用域（全局或局部）中生成新的变量</li>
<li>不允许删除普通变量（需要删除对象属性）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'><span class="k">delete</span> <span class="nx">x</span><span class="p">;</span> <span class="c1">// !!! syntax error</span>
</span><span class='line'>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;var y; delete y;&quot;</span><span class="p">);</span> <span class="c1">// !!! syntax error</span>
</span></code></pre></td></tr></table></div></figure>


<h3>简化 <code>eval</code> 和 <code>arguments</code></h3>

<ul>
<li>不能被赋值和作为参数或函数名等</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nb">eval</span> <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>
</span><span class='line'><span class="nx">arguments</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="o">++</span><span class="nb">eval</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">set</span> <span class="nx">p</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nb">eval</span><span class="p">;</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span> <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">x</span><span class="p">(</span><span class="nb">eval</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">arguments</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="kd">function</span> <span class="nb">eval</span><span class="p">()</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&quot;arguments&quot;</span><span class="p">,</span> <span class="s2">&quot;&#39;use strict&#39;; return 17;&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>arguments</code> 中的成员不是引用（意味着把实参拷贝到 arguments 中）</li>
</ul>


<blockquote><p>注意：至少在 node.js 0.12.7 中是浅拷贝而不是深拷贝。这样如果不是改变整个参数而是修改参数的属性时，会双向影响</p></blockquote>

<p>非严格模式下，修改实参会改变 arguments，但严格模式下不会改变；同样地，改变 arguments 中的值不会改变实参。这样意味着双方将独立变化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
</span><span class='line'>  <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pair</span> <span class="o">=</span> <span class="nx">f</span><span class="p">(</span><span class="mi">17</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">pair</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="mi">42</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">pair</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="mi">17</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不能使用 <code>arguments.callee</code></li>
</ul>


<p>请使用命名函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="nx">f</span><span class="p">();</span> <span class="c1">// throws a TypeError</span>
</span></code></pre></td></tr></table></div></figure>


<h3>更「安全」</h3>

<ul>
<li>函数中的 this 不再被强制装箱包装成对象，这意味着对于普通调用，<code>this</code> 将是 <code>undefined</code> 而不是非严格模式下的 <code>global</code>（浏览器中是 <code>window</code>）。</li>
<li>无法遍历调用栈，<code>fn.caller</code>、<code>fn.arguments</code> 等禁止访问</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">restricted</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">restricted</span><span class="p">.</span><span class="nx">caller</span><span class="p">;</span>    <span class="c1">// throws a TypeError</span>
</span><span class='line'>  <span class="nx">restricted</span><span class="p">.</span><span class="nx">arguments</span><span class="p">;</span> <span class="c1">// throws a TypeError</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">privilegedInvoker</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">restricted</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">privilegedInvoker</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>禁止使用 <code>arguments.caller</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">fun</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">caller</span><span class="p">;</span> <span class="c1">// throws a TypeError</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">fun</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// doesn&#39;t expose v (or a or b)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>为后续 ECMAScript 版本做准备</h3>

<ul>
<li>部分标识符变为保留字，包括 <code>implements</code>、<code>interface</code>、<code>let</code>、<code>package</code>、<code>private</code>、<code>protected</code>、<code>public</code>、<code>static</code> 和 <code>yield</code>。</li>
<li>禁止函数声明提升（注意，变量依然 ok），相应地，禁止了在块（如 if）中声明函数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span> <span class="c1">// !!! syntax error</span>
</span><span class='line'>  <span class="nx">f</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">f2</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span> <span class="c1">// !!! syntax error</span>
</span><span class='line'>  <span class="nx">f2</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">baz</span><span class="p">(){</span> <span class="c1">// kosher</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">eit</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span> <span class="c1">// also kosher</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">Strict mode</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[inline-block in ie6/7]]></title>
    <link href="http://liunian.github.io/blog/inline-block-in-ie6-and-7/"/>
    <updated>2014-09-12T23:15:07+08:00</updated>
    <id>http://liunian.github.io/blog/inline-block-in-ie6-and-7</id>
    <content type="html"><![CDATA[<p>在 ie6/7 中，<code>display:inline-block</code> 无法对 <code>div</code> 这些块状元素生效，最简单的解决方法就是改用 <code>span</code> 的 inline 元素。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Io Language]]></title>
    <link href="http://liunian.github.io/blog/io-language/"/>
    <updated>2013-01-01T03:13:05+08:00</updated>
    <id>http://liunian.github.io/blog/io-language</id>
    <content type="html"><![CDATA[<p>这是 <a href="http://iolanguage.org/">Io</a> 的简单笔记。</p>

<p>相关资源</p>

<ul>
<li><a href="http://iolanguage.org/">官网</a></li>
<li><a href="http://en.wikibooks.org/wiki/Io_Programming">wiki</a></li>
<li><a href="http://www.iolanguage.net/">一个中文博客</a></li>
<li><a href="http://iolanguage.org/scm/io/docs/IoTutorial.html">Tutorial</a></li>
</ul>


<h2>Basic</h2>

<ol>
<li>字符串只能用双引号，不能用单引号</li>
<li>没有类，只有类型和对象。两者的区别是前者有type标识(slot)，并且该标识是在创建时因为其为大写字母开头而确定为类型来添加的。</li>
<li>不是对象式的方法调用，而是向对象发送信息，比如 &ldquo;abc&rdquo; print。</li>
<li>一般地，赋值使用 := 而不是 =，如 obj := Object clone。在对象或对象 slot 还没存在的情况下，使用 = 会出错，但使用 := 则会先创建然后赋值。</li>
<li>从上可以看到，从某种类型创建一个对象使用 clone 消息。</li>
<li>查看一个对象可用 obj slotNames。</li>
<li>继承机制使用原型（proto）而不是父子类，如：</li>
</ol>


<figure class='code'><figcaption><span> (1.io)</span> <a href='http://liunian.github.io/downloads/code/1.io'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='io'><span class='line'><span class="c1">#!/usr/bin/env io</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vehicle</span> <span class="o">:=</span> <span class="nb">Object</span> <span class="k">clone</span>
</span><span class='line'><span class="n">Vehicle</span> <span class="n">description</span> <span class="o">:=</span> <span class="s">&quot;Something to take you far away&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Car</span> <span class="o">:=</span> <span class="n">Vehicle</span> <span class="k">clone</span>
</span><span class='line'><span class="n">ferrari</span> <span class="o">:=</span> <span class="n">Car</span> <span class="k">clone</span>
</span><span class='line'>
</span><span class='line'><span class="n">Car</span> <span class="n">slotNames</span> <span class="n">println</span>           <span class="c1"># list(type)</span>
</span><span class='line'><span class="n">ferrari</span> <span class="n">slotNames</span> <span class="n">println</span>       <span class="c1"># list()</span>
</span><span class='line'>
</span><span class='line'><span class="n">Car</span> <span class="n">description</span> <span class="n">println</span>         <span class="c1"># Something to take you far away</span>
</span><span class='line'><span class="n">ferrari</span> <span class="n">description</span> <span class="n">println</span>     <span class="c1"># Something to take you far away</span>
</span><span class='line'>
</span><span class='line'><span class="n">ferrari</span> <span class="n">proto</span> <span class="n">println</span>           <span class="c1"># Car_0x19bcb80: type = &quot;Car&quot;</span>
</span><span class='line'><span class="n">Car</span>     <span class="n">proto</span> <span class="n">println</span>           <span class="c1"># Vehicle_0x19c9f10: description = &quot;Something...&quot; type = &quot;Vehicle&quot;</span>
</span><span class='line'><span class="n">Vehicle</span> <span class="n">proto</span> <span class="n">println</span>           <span class="c1"># Object_0x17c1a10: type = Object_type() .....</span>
</span><span class='line'><span class="nb">Object</span>  <span class="n">proto</span> <span class="n">println</span>           <span class="c1"># Object_17e5720: Car = Car_0x19bcb80 Vehicle = Vehicle_0x19c9f10 Protos = xxx Lobby = xxxx ....</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>方法使用 method() 创建，如：Car dirve := method(&ldquo;Vroom&rdquo; print)，给 ferrari 发送 drive 消息将有 ferrari drive => &ldquo;Vroom&#8221;。</li>
<li>和 Ruby 一样，0 是 true 而不是 false。nil 是 false。</li>
</ol>


<!-- more -->


<h2>List &amp; Map</h2>

<figure class='code'><figcaption><span> (2.io)</span> <a href='http://liunian.github.io/downloads/code/2.io'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='io'><span class='line'><span class="c1">#!/usr/bin/env io</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">:=</span> <span class="nb">List</span> <span class="k">clone</span>             <span class="c1"># list(), create by using clone</span>
</span><span class='line'><span class="n">a</span> <span class="o">:=</span> <span class="nb">list</span><span class="o">(</span><span class="mf">1</span><span class="o">,</span> <span class="mf">2</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">)</span>   <span class="c1"># list(1, 2, a, b), create by using method</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="n">at</span><span class="o">(</span><span class="mf">1</span><span class="o">)</span>                     <span class="c1"># 2</span>
</span><span class='line'><span class="n">a</span> <span class="n">append</span><span class="o">(</span><span class="mf">3</span><span class="o">)</span>                 <span class="c1"># list(1, 2, a, b, 3)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># more examples: http://iolanguage.org/scm/io/docs/IoGuide.html#Primitives-List</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Control Flow</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='io'><span class='line'><span class="n">loop</span><span class="o">(</span><span class="s">&quot;getting dizzy...&quot;</span> <span class="n">println</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># while(condiction, other_codes)</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="mf">0</span>
</span><span class='line'><span class="n">while</span><span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="mf">11</span><span class="o">,</span> <span class="n">i</span> <span class="n">println</span><span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mf">1</span><span class="o">);</span>   <span class="s">&quot;This one goes up to 11&quot;</span> <span class="n">println</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># for(counter, init, end, step, msg_slot)</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="mf">1</span><span class="o">,</span> <span class="mf">11</span><span class="o">,</span> <span class="mf">2</span><span class="o">,</span> <span class="n">i</span> <span class="n">println</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># if(condition, true_code, false_code)</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="no">true</span><span class="o">,</span> <span class="s">&quot;It is true.&quot;</span><span class="o">,</span> <span class="s">&quot;It is false.&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="no">false</span><span class="o">)</span> <span class="k">then</span><span class="o">(</span><span class="s">&quot;It is true.&quot;</span><span class="o">)</span> <span class="k">else</span><span class="o">(</span><span class="s">&quot;It is false&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Library]]></title>
    <link href="http://liunian.github.io/blog/python-library/"/>
    <updated>2012-12-19T03:10:13+08:00</updated>
    <id>http://liunian.github.io/blog/python-library</id>
    <content type="html"><![CDATA[<h2>Built-in Functions</h2>

<p><em>callable(object)</em></p>

<p>Note that classed are callable(calling a class returns a new instance); class instances are callable if they have a <code>__call__()</code> method.
classmethod VS staticmethod</p>

<p><em>cmp(x, y)</em></p>

<p>return negative if x &lt; y, 0 if x = y, positive if x > y</p>

<p><em>To be continued…</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress memo]]></title>
    <link href="http://liunian.github.io/blog/octopress/"/>
    <updated>2012-08-03T02:51:34+08:00</updated>
    <id>http://liunian.github.io/blog/octopress</id>
    <content type="html"><![CDATA[<h2>Install</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash -s stable &lt; &lt;<span class="o">(</span>curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add to bash command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;&amp; . &quot;$HOME/.rvm/scripts/rvm&quot; # Load RVM function&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span><span class='line'>
</span><span class='line'><span class="c"># If using Zsh do this instead</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm&#39;</span> &gt;&gt; ~/.zshrc
</span><span class='line'><span class="nb">source</span> ~/.zshrc
</span></code></pre></td></tr></table></div></figure>


<p>Install Ruby</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm install 1.9.2 <span class="o">&amp;&amp;</span> rvm use 1.9.2
</span><span class='line'><span class="c"># 1.9.3 will not fit here for now</span>
</span></code></pre></td></tr></table></div></figure>


<p>Switch back to system</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use system
</span></code></pre></td></tr></table></div></figure>


<p>when using zsh, should add something in .zshrc to make it work right.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">rake</span><span class="o">=</span><span class="s2">&quot;noglob rake&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding it, restart the terminal or source the .zshrc file.</p>

<!-- more -->


<h2>code snippets</h2>

<h3><a href="http://octopress.org/docs/blogging/code/">Basic</a></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="sb">```</span> <span class="o">[</span>language<span class="o">]</span> <span class="o">[</span>title<span class="o">]</span> <span class="o">[</span>url<span class="o">]</span> <span class="o">[</span>link text<span class="o">]</span>
</span><span class='line'>code snippet
</span><span class='line'><span class="se">\`</span><span class="sb">``</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Gists</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span><span class="se">\%</span> gist gist_id <span class="o">[</span>filename<span class="o">]</span> %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Include Code Snippets</h3>

<p>Import files on your filesystem into any blog post as embedded code snippets with syntax highlighting and a download link. In the _config.yml you can set your code_dir but the default is <code>source/downloads/code</code>. Simply put a file anywhere under that directory and use the following tag to embed it in a post.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>% include_code <span class="o">[</span>title<span class="o">]</span> <span class="o">[</span>lang:language<span class="o">]</span> path/to/file %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Following example will include the code file: <code>source/downloads/code/test.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>% include_code test.js  %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>image</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>% img <span class="o">[</span>class names<span class="o">]</span> /path/to/image <span class="o">[</span>width<span class="o">]</span> <span class="o">[</span>height<span class="o">]</span> <span class="o">[</span>title text <span class="o">[</span>alt text<span class="o">]]</span> %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>extended blockquote</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>% blockquote <span class="o">[</span>author<span class="o">[</span>, <span class="nb">source</span><span class="o">]]</span> <span class="o">[</span>link<span class="o">]</span> <span class="o">[</span>source_link_title<span class="o">]</span> %<span class="o">}</span>
</span><span class='line'>Quote string
</span><span class='line'><span class="o">{</span>% endblockquote %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Render Partial</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>% render_partial path/to/file %<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>add about page</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>http://gangmax.github.com/blog/2012/05/04/add-about-page-in-octopress/
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Tutorial]]></title>
    <link href="http://liunian.github.io/blog/python-tutorial/"/>
    <updated>2012-07-14T02:21:51+08:00</updated>
    <id>http://liunian.github.io/blog/python-tutorial</id>
    <content type="html"><![CDATA[<h2>Python Interactive Shell</h2>

<p><code>_</code> 变量代表最后一次 return 的值。</p>

<h2>Source Code Encoding</h2>

<p>Python 2.x 默认识别源码为 ASCII，对于需要使用如中文等，可以在源码中指定编码类型，如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># -*- coding: utf-8 -*-</span></code></pre></td></tr></table></div></figure>


<p>此方法不使用与 2.2 及更旧版本，3.x 后默认为 utf-8 编码，无需如此。</p>

<p>注意：</p>

<ul>
<li>如果第一行是如 <code>/usr/bin/env python</code> 这样的指定，那么指定的编码类型必须位于第二行，中间不能有空行。</li>
<li>如果第一行不是程序指定，那么编码类型注释前面可以有空行。</li>
<li>加了编码类型注释后，注释中可以直接使用中文了，但在代码中，需要用 u<code>'中文'</code>，而不能直接想 JS 中那样使用字符串。</li>
</ul>


<h2>Number</h2>

<p>0 == 0.0</p>

<p>/ （除法）</p>

<p>2.x 中对两个整数应用 / ，得到的是 math.floor，但其中一个 float，则得到 float。如：5 / 2 = 2； 5 / 2.0 = 2.5；</p>

<p>3.x 中默认是普通的除法，不取 floor。</p>

<h2>复数（complex）</h2>

<p>用 1j 或 2J 等形式来表示虚数，也可以用 complex 类来构建复数。如：<code>(1+2j) + complex(2, 1)</code>。得到的复数 i，可以用 <code>i.real</code> 和 <code>i.imag</code> 来分别获取实数部分和虚数部分。</p>

<!-- more -->


<h2>unicode</h2>

<h3>unicode to str</h3>

<p>对于用 <code>u’string’</code> 声明的 unicode 变量，如果都是 ASCII 码，那么可以用 <code>str</code> 来转换为普通的字符串，但如果有非 ASCII 的，那么则无法。</p>

<p>这使用需要使用 <code>aunicodeObj.encode('utf-8')</code> 等形式来转换为对应编码的字符串。</p>

<h2>multiple assignment</h2>

<p>可以用 <code>a, b = 0, 1</code> 这种形式来同时多个赋值，利用这个特性，可以做到交换值的功能：<code>a, b = b, a</code>。</p>

<h2>Control Flow</h2>

<h3>if else</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">if</span> <span class="n">condition</span><span class="p">:</span>
</span><span class='line'>    <span class="n">doSomething</span>
</span><span class='line'><span class="k">elif</span> <span class="n">otherCondition</span><span class="p">:</span>
</span><span class='line'>    <span class="n">doSomething</span> <span class="n">Else</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">others</span>
</span></code></pre></td></tr></table></div></figure>


<h3>for</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>


<h3>while</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">while</span> <span class="n">conditon</span><span class="p">:</span>
</span><span class='line'>    <span class="n">doSomething</span>
</span></code></pre></td></tr></table></div></figure>


<h3>range([start, ] end [, step])</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>            <span class="c"># =&gt; [0, 1, 2, 3, 4]</span>
</span><span class='line'><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>         <span class="c"># =&gt; [1, 2, 3, 4]</span>
</span><span class='line'><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>      <span class="c"># =&gt; [1, 3]</span>
</span><span class='line'><span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="c"># =&gt; [-10, -13, -16, -19]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">aList</span><span class="p">)):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span><span class="p">,</span> <span class="n">aList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>function</h3>

<p>函数参数的默认值仅生效一次（why？），在其为可变对象（如 list，dictionary 等）时，可能会带来困扰。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">L</span><span class="o">=</span><span class="p">[]):</span>
</span><span class='line'>    <span class="n">L</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">L</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>      <span class="c"># =&gt; [1]</span>
</span><span class='line'><span class="k">print</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>      <span class="c"># =&gt; [1, 2]</span>
</span><span class='line'><span class="k">print</span> <span class="n">f</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>      <span class="c"># =&gt; [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用函数时，一旦某个参数使用了命名参数形式，则其后面的参数都必须使用命名参数形式。</p>

<h3>*args 和 **keywords</h3>

<p>定义函数时，args 表示用一个 args 元组来代表后面任意多个基于位置的参数，**keywords 则用一个 dict 来记录后面的基于命名的参数，且必须在 args 后面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">t</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="o">**</span><span class="n">d</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;a: &#39;</span><span class="p">,</span> <span class="n">a</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;b: &#39;</span><span class="p">,</span> <span class="n">b</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">c</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;-&#39;</span><span class="p">,</span> <span class="n">i</span>
</span><span class='line'>    <span class="n">keys</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">k</span><span class="p">,</span> <span class="s">&#39;:&#39;</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">t</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">e</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">f</span><span class="o">=</span><span class="mi">7</span><span class="p">)</span>    <span class="c"># =&gt;</span>
</span><span class='line'>                                    <span class="n">a</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>                                    <span class="n">b</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>                                    <span class="o">-</span> <span class="mi">3</span>
</span><span class='line'>                                    <span class="o">-</span> <span class="mi">4</span>
</span><span class='line'>                                    <span class="n">d</span> <span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>                                    <span class="n">e</span> <span class="p">:</span> <span class="mi">6</span>
</span><span class='line'>                                    <span class="n">f</span> <span class="p">:</span> <span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用函数时，使用 *args 和 **keywords 可以展开一个 tuple/list 和 dict 来传参。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="nb">range</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>    <span class="c"># =&gt; [3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Doc Strings</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">t</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Short summary.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Other description.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Data Structures</h2>

<h3>list</h3>

<p>methods: <code>list.append(x), list.count(x), list.extend(L), list.index(x), list.insert(i, x), insert.pop([i]), list.remove(x), list.reverse(), list.sort()</code></p>

<p>list.sort() 和 list.reverse() 是原地修改的，返回值是 <code>None</code></p>

<p>list comprehension 在规则简单的情况下比 filter 和 map 更简洁易读。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
</span><span class='line'><span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="n">y</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">vec</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class='line'><span class="p">[</span><span class="n">num</span> <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">vec</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">elem</span><span class="p">]</span>   <span class="c"># =&gt; [1, 2, 3, 4, ..., 9]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>tuple</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;a&#39;</span>       <span class="c"># =&gt; (1, 2, &#39;a&#39;)</span>
</span><span class='line'><span class="n">u</span> <span class="o">=</span>  <span class="mi">1</span><span class="p">,</span>             <span class="c"># =&gt; (1, )</span>
</span><span class='line'><span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">)</span>           <span class="c"># =&gt; (1, )</span>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">t</span>         <span class="c"># =&gt; a = 1, b = 3, c = &#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>set</h3>

<p>set（集合）是无序去重的结构，支持 in，-， |， &amp;，^ 等操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;abr&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;ac&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span> <span class="o">-</span> <span class="n">b</span>               <span class="c"># =&gt; set([&#39;b&#39;, &#39;r&#39;])</span>
</span><span class='line'><span class="n">a</span> <span class="o">|</span> <span class="n">b</span>               <span class="c"># =&gt; set([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;r&#39;])</span>
</span><span class='line'><span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>               <span class="c"># =&gt; set([&#39;a&#39;])</span>
</span><span class='line'><span class="n">a</span> <span class="o">^</span> <span class="n">b</span>               <span class="c"># =&gt; set([&#39;b&#39;, &#39;c&#39;, &#39;r&#39;])</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>pop()</code> 随机返回并移除 set 中的一个元素，当为空时返回 <code>KeyError</code> 异常。</p>

<p><code>remove(element)</code> 移除 set 中指定的元素，当其不存在时，返回 <code>KeyError</code> 异常。</p>

<h3>dictionary</h3>

<p>除了字面量构建 dict 外，还可以从 tuple 的 list 或命名参数赋值的方式来构建，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">dict</span><span class="p">([(</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)])</span>
</span><span class='line'><span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>dict.keys()</code> 获取所有的 key 组成的 list，<code>dict.values()</code> 获取所有的 value 组成的 list，<code>dict.items()</code> 或得 (key, value) 的 list。</p>

<h2>loop</h2>

<p>在 for in 循环中，若需要 index，除了使用 range 的方式外，还可以使用 <code>enumerate</code> 函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">([</span><span class="s">&#39;tic&#39;</span><span class="p">,</span> <span class="s">&#39;tac&#39;</span><span class="p">,</span> <span class="s">&#39;toc&#39;</span><span class="p">]):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时遍历多个序列，先使用 zip 处理一下或会更好一点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Input &amp; Output</h2>

<p><code>print 1</code>, 最后带 <code>,</code> 这种方式将不会自动换行。</p>

<p>下面这些函数可用来作为输出布局，都是返回一个新的字符串（String 是不可变的），当字符串长度大于 width 时，返回原字符串的拷贝，不作任何修改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">str</span><span class="o">.</span><span class="n">rjust</span><span class="p">(</span><span class="n">width</span><span class="p">[,</span> <span class="n">fillchar</span><span class="p">]);</span>
</span><span class='line'><span class="nb">str</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="n">width</span> <span class="p">[,</span> <span class="n">fillchar</span><span class="p">];</span>
</span><span class='line'><span class="nb">str</span><span class="o">.</span><span class="n">center</span><span class="p">(</span><span class="n">width</span> <span class="p">[,</span> <span class="n">fillchar</span><span class="p">]);</span>
</span><span class='line'><span class="nb">str</span><span class="o">.</span><span class="n">zfill</span><span class="p">(</span><span class="n">width</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>str.format</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">str</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kargs</span><span class="p">)</span>  <span class="c"># =&gt; unicode</span>
</span></code></pre></td></tr></table></div></figure>


<p>str 中用 <code>{}</code> 来代表预置的变量，可存在着多个，比如：<code>'first: {}, second: {}'.format(1, 2)</code>；也可以用 <code>{3}</code> 这样的方式来指定使用第4个参数（从0开始）；如果<code>format</code>中的参数带命名，那么还可以采用这样的方式：<code>'a: {a}'.format(1, a=2)</code>。</p>

<p>可以使用 <code>:</code> 来指定更加详细高级的格式，比如 <code>'a: {a:.3f}'.format(a=3.141592535)' # =&gt; 3.142</code> 从定义可知，还可以采用参数展开的方法来给 <code>format</code> 传参。</p>

<h3>str % var</h3>

<p>This is the old style formatting. <code>'abc %s %d' % ('happy', 1)</code></p>

<h3>file.seek(offset, from_what)</h3>

<p><code>from_what</code> 有 3 个值， 0（默认值）、1 和 2，分别代表 文件头、当前位置和文件尾。</p>

<h2>Errors &amp; Exceptions</h2>

<p>可以用 <code>except (Exception1, Exception2)</code> 的方式来对多种异常做相同的处理；<code>except Exception1</code>, <code>e</code> 是 <code>except Exception1 as e</code> 的简写；还可以用 <code>raise</code> 继续往外抛。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;file&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">notExist</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="p">(</span><span class="ne">IOError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">)</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;File content error({0}): {1}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">errno</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">strerror</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Not exist variable: notExist&quot;</span>
</span><span class='line'><span class="k">except</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;other exception no expected&#39;</span>
</span><span class='line'>    <span class="k">raise</span>
</span></code></pre></td></tr></table></div></figure>


<p>raise 出来的异常对象（e）可带有信息，这些存在 <code>e.args</code> 这个元组中，并且，Exception 对象的 <code>__str__</code> 默认作了 print args 的效果，故不用特意去 print。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sb">`raise Exception(&#39;spam&#39;, &#39;eggs&#39;)`</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>try except</code> 后还可带 else 和 finally 块，前者在无异常发生时执行，而后者则总会执行到。</p>

<h2>Classes</h2>

<h3>Names &amp; Objects</h3>

<p>对象（Object）是独立自由的，可以用多个名字（Names）来指向它。可以认为 Name 是 Object 的别名（Alias）或软链接、快捷方式之类。Python 中，参数传递和赋值使用的都是 Name 而不是直接使用 Object，因此，传参的代价就很小了。</p>

<h3>Namespaces &amp; Scopes</h3>

<p>对于运行时的可直接访问的 Namespaces，有以下作用域：</p>

<ul>
<li>最里层作用域，最先查找，包含局部变量</li>
<li>外包装函数作用域，一层层往外查找，包含了非当前局部变量和非全局变量</li>
<li>模块作用域，包含了模块全局变量</li>
<li>最外层（最后查找）的是内置（built-in）作用域，包含了内置变量</li>
</ul>


<p>Assignments do not copy data – they just bind names to objects.</p>

<h3>class</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span><span class="p">:</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;class doc&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">123456</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;hello&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">MyClass</span><span class="o">.</span><span class="n">i</span>   <span class="c"># =&gt; 123456</span>
</span><span class='line'><span class="n">MyClass</span><span class="o">.</span><span class="n">f</span>   <span class="c"># =&gt; &lt;unbound method MyClass.f&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>__init__</code> 充当构造函数（如果需要）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">i</span>         <span class="c"># =&gt; 123456</span>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">f</span>         <span class="c"># =&gt; &lt;bound method MyClass.f of ..... at 0x....&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Notes</em>: 称 MyClass.f 为 function，称 x.f 为 method。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">df</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;df&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span><span class="o">.</span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span>   <span class="c"># =&gt; 认为这是一个 data attribute 而不是 method attribute</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>x.f()</code> 实质为 <code>MyClass.f(x)</code>。</p>

<p>调用一个实例的属性（attribute）的过程是：首先看是否是 data attribute，是则返回；否则搜索其 class，挡在其 class 中找到对应名字的 function，则用该实例和对应的 function 创建一个 method 对象。当调用该 method 对象时，用该实例和 method 对象实参组成的新实参来调用 class 的 function。</p>

<p>类实例的 class 属性指向该类。</p>

<p>继承机制中，子类的 data attribute 和 method attribute 将会覆盖基类的对应 attribute。这包括 method 调用的 method，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;a&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">l</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">p</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>       <span class="k">print</span> <span class="s">&#39;b&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">B</span><span class="p">()</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">l</span><span class="p">()</span>           <span class="c"># =&gt; &#39;b&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>B 的实例 b 调用继承自 A 的 method <code>l</code>，里面又调用了 p method，此时，调用的是 B 中 override 后的 method。</p>

<h2>Iterators</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&#39;abc&#39;</span>
</span><span class='line'><span class="n">it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>   <span class="c"># =&gt; &#39;a&#39;</span>
</span><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>   <span class="c"># =&gt; &#39;b&#39;</span>
</span><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>   <span class="c"># =&gt; &#39;c&#39;</span>
</span><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>   <span class="c"># =&gt; StopIteration</span>
</span></code></pre></td></tr></table></div></figure>


<p>若需要对一个 class 实现 for in 迭代，只需要定义 iter 和 next 方法即可，其中，iter 返回 self，next 负责返回当前结果，越界时抛出 StopIteration 异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Reverse</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">StopIteration</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">index</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Generators</h2>

<p>和普通函数相同，只是在该 return 时使用 <code>yield</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">data</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Standard Library</h2>

<h3>Operating System Interface</h3>

<p>use <code>import os</code> instead of <code>from os import *</code>, this will keep <code>os.open()</code> shadowing the built-in <code>open()</code> function which operates much differently.</p>

<p><code>os.system(command)</code> execute the command(a string) in a subshell.</p>

<p>for high level file and directory tasks, the shutil module is much more easier.</p>

<h3>文件通配查找</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">pathname</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Command Line Arguments</h3>

<p><code>sys</code> 模块中常用的是 <code>sys.argv</code>，<code>getopt</code> 和 <code>argparse</code> 可以提供更高级的参数处理。</p>

<h3>性能测量</h3>

<p>timeit, profile, pstats</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">timeit</span> <span class="kn">import</span> <span class="n">Timer</span>
</span><span class='line'><span class="n">Timer</span><span class="p">(</span><span class="s">&#39;t=a; a=b; b=t&#39;</span><span class="p">,</span> <span class="s">&#39;a=1; b=2&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">timeit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>测试</h3>

<p><code>doctest</code> 允许运行以一定规则写在 docstring 中的代码，并判断是否和给出的结果相符，若有失败，则输出信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">average</span><span class="p">(</span><span class="n">values</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Computes the arithmetic mean of a list of numbers</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    &gt;&gt;&gt; print average([20, 30, 70])</span>
</span><span class='line'><span class="sd">    40.0</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">values</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">doctest</span>
</span><span class='line'><span class="n">doctest</span><span class="o">.</span><span class="n">testmod</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h4>unittest</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">unittest</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestStatisticalFunctions</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_average</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">average</span><span class="p">([</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">70</span><span class="p">]),</span> <span class="mf">40.0</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">average</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]),</span> <span class="mi">1</span><span class="p">),</span> <span class="mf">4.3</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertRaises</span><span class="p">(</span><span class="ne">ZeroDivisionError</span><span class="p">,</span> <span class="n">average</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertRaises</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">,</span> <span class="n">average</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">70</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span> <span class="c"># Calling from the command line invokes all tests</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ie6 Inline-block 折行问题]]></title>
    <link href="http://liunian.github.io/blog/ie6-inline-block-new-line/"/>
    <updated>2012-07-07T12:49:50+08:00</updated>
    <id>http://liunian.github.io/blog/ie6-inline-block-new-line</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>IE6 下使用 <code>display:inline-block</code> 可能会发现中间出现了折行。</p>

<h2>解决方法</h2>

<p><code>display:inline-block</code> 的元素前后不能有空白符，需要紧紧相连。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ie6 float right 导致换行]]></title>
    <link href="http://liunian.github.io/blog/ie6-float-right-bug/"/>
    <updated>2012-06-29T02:11:20+08:00</updated>
    <id>http://liunian.github.io/blog/ie6-float-right-bug</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p>IE6 下，当一个 float:right 的元素不是第一个子元素并且其前面没有 float:left 的元素时，那么将会将会导致一个换行。</p>

<h2>解决方法</h2>

<p>将 float:right 的元素放到最前面
把 float:right 前面的一个或多个元素加上 float:left（视样式而定)</p>

<!-- more -->


<h2>demos</h2>

<figure class='code'><figcaption><span> (ie6_float_right.html)</span> <a href='http://liunian.github.io/downloads/code/ie6_float_right.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Ie6_float_right<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">media=</span><span class="s">&quot;screen&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nc">.t</span><span class="p">{</span><span class="k">width</span><span class="o">:</span><span class="m">300px</span><span class="p">;</span> <span class="k">margin</span><span class="o">:</span><span class="m">0</span> <span class="k">auto</span> <span class="m">10px</span><span class="p">;</span> <span class="k">border</span><span class="o">:</span><span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span><span class="n">zoom</span><span class="o">:</span><span class="m">1</span><span class="p">;}</span>
</span><span class='line'>        <span class="nc">.t</span><span class="nd">:after</span><span class="p">{</span><span class="k">clear</span><span class="o">:</span><span class="k">both</span><span class="p">;</span> <span class="k">display</span><span class="o">:</span><span class="k">block</span><span class="p">;</span> <span class="k">content</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="k">line-height</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="k">font-size</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="k">visibility</span><span class="o">:</span><span class="k">hidden</span><span class="p">;</span> <span class="k">overflow</span><span class="o">:</span><span class="k">hidden</span><span class="p">;}</span>
</span><span class='line'>        <span class="nc">.t</span> <span class="nt">span</span><span class="p">{</span><span class="k">display</span><span class="o">:</span><span class="k">inline</span><span class="p">;</span> <span class="k">margin</span><span class="o">:</span><span class="m">0</span> <span class="m">5px</span> <span class="m">0</span> <span class="m">0</span><span class="p">;}</span>
</span><span class='line'>        <span class="nc">.l</span><span class="p">{</span><span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;}</span>
</span><span class='line'>        <span class="nc">.r</span><span class="p">{</span><span class="k">float</span><span class="o">:</span><span class="k">right</span><span class="p">;}</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>在 IE6 下，如果一个 float right 的元素不是第一个子元素且前面没有float left的元素，那么将会导致一个换行，如例 1~3。<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;t&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>none float<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;r&quot;</span><span class="nt">&gt;</span>float right<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;t&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>none float<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;r&quot;</span><span class="nt">&gt;</span>float right<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>none float<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;t&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>none float<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;r&quot;</span><span class="nt">&gt;</span>float right<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;l&quot;</span><span class="nt">&gt;</span>float left<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;t&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;l&quot;</span><span class="nt">&gt;</span>float left<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;r&quot;</span><span class="nt">&gt;</span>float right<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>none float<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;t&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;l&quot;</span><span class="nt">&gt;</span>float left<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;r&quot;</span><span class="nt">&gt;</span>float right<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;t&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;r&quot;</span><span class="nt">&gt;</span>float right<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>none float<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
